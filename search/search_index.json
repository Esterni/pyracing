{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This package is an API wrapper/client for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API. However, we've done our best to build something that might resemble an actual API. Basic Usage from pyracing import Client username = 'username' password = 'password' ir = Client ( username , password ) # Authentication is automated and initiated on first request seasons = await ir . current_seasons () for season in seasons : if season . series_id == 231 : for t in tracks : print ( f 'Week { t . race_week } will take place at { t . name } ( { t . config } )' ) The result will be Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit ()","title":"Home"},{"location":"#introduction","text":"This package is an API wrapper/client for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API. However, we've done our best to build something that might resemble an actual API.","title":"Introduction"},{"location":"#basic-usage","text":"from pyracing import Client username = 'username' password = 'password' ir = Client ( username , password ) # Authentication is automated and initiated on first request seasons = await ir . current_seasons () for season in seasons : if season . series_id == 231 : for t in tracks : print ( f 'Week { t . race_week } will take place at { t . name } ( { t . config } )' ) The result will be Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit ()","title":"Basic Usage"},{"location":"contributing/","text":"Contributing (Under Construction) Please feel free to open issues, offer suggestions, or fork and submit a pull request to help polish things up here. We only ask that you be willing to openly discuss things in a respectful manner. If you'd like to chat in Discord, I can be reached in the iRacing Open Wheel Discord (nearing 1000 members!). My username is Jacob Anderson7#4903. I'd be happy to hear from those interested in this project and if enough people reach out I'll make a section just for this project.","title":"Contributing"},{"location":"contributing/#contributing-under-construction","text":"Please feel free to open issues, offer suggestions, or fork and submit a pull request to help polish things up here. We only ask that you be willing to openly discuss things in a respectful manner. If you'd like to chat in Discord, I can be reached in the iRacing Open Wheel Discord (nearing 1000 members!). My username is Jacob Anderson7#4903. I'd be happy to hear from those interested in this project and if enough people reach out I'll make a section just for this project.","title":"Contributing (Under Construction)"},{"location":"data/","text":"About This document is to provide a baseline reference for this projects code style as well as give meaning to the names of the datapoints Code Style This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. 1 Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS. 1 Not required to submit a pull request, but it will be changed before a merge. :) Datapoint Definitions Here we will layout terms that are unique to iRacing and how we, as users, often abbreviate them. The idea is to eliminate any guesswork as to what iRacing's internal names mean compared to what we might be familiar with as users of the service. event_results Our Name iRacing's Name best_qlap bestquallaptime subsession_best_lap subsession_bestlaptime best_lap bestlaptime car_class_id carclassid car_id carid cat_id catid champ_points_sort champpointssort champ_points champpoints club_points_sort clubpointssort club_points clubpoints cust_id custid display_name displayname drop_race dropracepoints event_type evttype finish_pos finishing_position group_name groupname helm_color1 helm_color1 helm_color2 helm_color2 helm_color3 helm_color3 helm_license_level helm_licenselevel helm_pattern helm_pattern incidents incidents license_class licensegroup official officialsession race_week race_week_num raw_start_time raw_start_time row rn season_id seasonid season_quarter season_quarter series_id seriesid session_id sessionid session_rank sesrank start_date start_date start_pos starting_position start_time start_time strength_of_field strengthoffield subsession_id subsessionid time_finished finishedat track_id trackid winner_display_name winnerdisplayname winner_helm_color1 winnerhelmcolor1 winner_helm_color2 winnerhelmcolor2 winner_helm_color3 winnerhelmcolor3 winner_helm_pattern winnerhelmpattern winner_license_level winnerlicenselevel winner_group_id winnersgroupid year season_year","title":"Returned Data"},{"location":"data/#about","text":"This document is to provide a baseline reference for this projects code style as well as give meaning to the names of the datapoints","title":"About"},{"location":"data/#code-style","text":"This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. 1 Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS. 1 Not required to submit a pull request, but it will be changed before a merge. :)","title":"Code Style"},{"location":"data/#datapoint-definitions","text":"Here we will layout terms that are unique to iRacing and how we, as users, often abbreviate them. The idea is to eliminate any guesswork as to what iRacing's internal names mean compared to what we might be familiar with as users of the service.","title":"Datapoint Definitions"},{"location":"data/#event_results","text":"Our Name iRacing's Name best_qlap bestquallaptime subsession_best_lap subsession_bestlaptime best_lap bestlaptime car_class_id carclassid car_id carid cat_id catid champ_points_sort champpointssort champ_points champpoints club_points_sort clubpointssort club_points clubpoints cust_id custid display_name displayname drop_race dropracepoints event_type evttype finish_pos finishing_position group_name groupname helm_color1 helm_color1 helm_color2 helm_color2 helm_color3 helm_color3 helm_license_level helm_licenselevel helm_pattern helm_pattern incidents incidents license_class licensegroup official officialsession race_week race_week_num raw_start_time raw_start_time row rn season_id seasonid season_quarter season_quarter series_id seriesid session_id sessionid session_rank sesrank start_date start_date start_pos starting_position start_time start_time strength_of_field strengthoffield subsession_id subsessionid time_finished finishedat track_id trackid winner_display_name winnerdisplayname winner_helm_color1 winnerhelmcolor1 winner_helm_color2 winnerhelmcolor2 winner_helm_color3 winnerhelmcolor3 winner_helm_pattern winnerhelmpattern winner_license_level winnerlicenselevel winner_group_id winnersgroupid year season_year","title":"event_results"},{"location":"functions/","text":"Which function for X data? Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) Note : While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it.. Driver Data Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results() career_stats() Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return. driver_stats() Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'Driver Full Name5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data event_results() Returns a list of event results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded. irating() Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here. last_races_stats() Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return. last_series() Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return. license_class() Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here. member_cars_driven() Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven. member_division() Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division. member_subsession_id_from_session() Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession. driver_status() Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results. personal_bests() Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver. race_laps_driver() Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. stats_chart() Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access. ttrating() Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here. yearly_stats() Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return. Series Data active_op_counts() Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose. next_event() Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark. next_session_times() Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for. season_standings() Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. series_race_results() Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time. team_standings() ( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week. Session Data all_subsessions() Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for. private_results() Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module. race_guide() Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed. race_laps_all() Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. season_from_session() Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for subsession_data() Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return. total_registered_all() Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description Global Data car_class_by_id() Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\". current_seasons() Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id world_records() Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"Class Methods"},{"location":"functions/#which-function-for-x-data","text":"Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) Note : While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it..","title":"Which function for X data?"},{"location":"functions/#driver-data","text":"Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results()","title":"Driver Data"},{"location":"functions/#career_stats","text":"Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return.","title":"career_stats()"},{"location":"functions/#driver_stats","text":"Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'Driver Full Name5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data","title":"driver_stats()"},{"location":"functions/#event_results","text":"Returns a list of event results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded.","title":"event_results()"},{"location":"functions/#irating","text":"Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"irating()"},{"location":"functions/#last_races_stats","text":"Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return.","title":"last_races_stats()"},{"location":"functions/#last_series","text":"Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return.","title":"last_series()"},{"location":"functions/#license_class","text":"Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"license_class()"},{"location":"functions/#member_cars_driven","text":"Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven.","title":"member_cars_driven()"},{"location":"functions/#member_division","text":"Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division.","title":"member_division()"},{"location":"functions/#member_subsession_id_from_session","text":"Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession.","title":"member_subsession_id_from_session()"},{"location":"functions/#driver_status","text":"Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results.","title":"driver_status()"},{"location":"functions/#personal_bests","text":"Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver.","title":"personal_bests()"},{"location":"functions/#race_laps_driver","text":"Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_driver()"},{"location":"functions/#stats_chart","text":"Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access.","title":"stats_chart()"},{"location":"functions/#ttrating","text":"Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"ttrating()"},{"location":"functions/#yearly_stats","text":"Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return.","title":"yearly_stats()"},{"location":"functions/#series-data","text":"","title":"Series Data"},{"location":"functions/#active_op_counts","text":"Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose.","title":"active_op_counts()"},{"location":"functions/#next_event","text":"Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark.","title":"next_event()"},{"location":"functions/#next_session_times","text":"Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for.","title":"next_session_times()"},{"location":"functions/#season_standings","text":"Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module.","title":"season_standings()"},{"location":"functions/#series_race_results","text":"Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time.","title":"series_race_results()"},{"location":"functions/#team_standings","text":"( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week.","title":"team_standings()"},{"location":"functions/#session-data","text":"","title":"Session Data"},{"location":"functions/#all_subsessions","text":"Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for.","title":"all_subsessions()"},{"location":"functions/#private_results","text":"Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module.","title":"private_results()"},{"location":"functions/#race_guide","text":"Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed.","title":"race_guide()"},{"location":"functions/#race_laps_all","text":"Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_all()"},{"location":"functions/#season_from_session","text":"Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for","title":"season_from_session()"},{"location":"functions/#subsession_data","text":"Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return.","title":"subsession_data()"},{"location":"functions/#total_registered_all","text":"Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description","title":"total_registered_all()"},{"location":"functions/#global-data","text":"","title":"Global Data"},{"location":"functions/#car_class_by_id","text":"Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\".","title":"car_class_by_id()"},{"location":"functions/#current_seasons","text":"Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id","title":"current_seasons()"},{"location":"functions/#world_records","text":"Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"world_records()"},{"location":"modules/","text":"client The client module contains the Client() class which makes up the bulk of pyracing. Along with Client.authenticate(), it holds the class methods to query all of iRacing's web-data. For a detailed description of each class method, see the List of Functions wiki page. constants The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used. response_objects The response_objects sub-package is responsible for taking the JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data. Getting the strength_of_field of a session: ir = client . Client ( 'username' , 'password' ) session_data = await ir . subsession_data ( subsession_id , cust_id = None ) print ( session_data . strength_of_field ) Result: 3051","title":"Modules"},{"location":"modules/#_1","text":"","title":""},{"location":"modules/#client","text":"The client module contains the Client() class which makes up the bulk of pyracing. Along with Client.authenticate(), it holds the class methods to query all of iRacing's web-data. For a detailed description of each class method, see the List of Functions wiki page.","title":"client"},{"location":"modules/#constants","text":"The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used.","title":"constants"},{"location":"modules/#response_objects","text":"The response_objects sub-package is responsible for taking the JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data. Getting the strength_of_field of a session: ir = client . Client ( 'username' , 'password' ) session_data = await ir . subsession_data ( subsession_id , cust_id = None ) print ( session_data . strength_of_field ) Result: 3051","title":"response_objects"}]}