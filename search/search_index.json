{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u00b6 This package is an asynchronous API wrapper that handles everything necessary for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API for us to wrap; This is more like \"we pieced things together into something that resembles an API wrapper\" kind of wrapper. Note From the Author We understand that some users of this package will be looking to use this as a learning project and that asynchronous programming is a few steps ahead at the moment. If you fall into that category, you'll be relieved to know (maybe?) that we've writting this documentation with you in mind. If you get stuck, please see the contibuting page to join the discussion. We'd be happy to help! We hope to provide an identical synchronous version in the future, but for now the design choice was made with discord bots in mind. If you'd like more resources on asyncio, we recommend the overview guide of asyncio from RealPython . Basic Usage \u00b6 This example will print the season track schedule for the Advanced Mazda series. from pyracing.client import Client import asyncio username = 'iRacing username' password = 'iRacing password' # Authentication is automated and will be initiated on first request ir = Client ( username , password ) # Example async function with hardcoded results async def main (): seasons_list = await ir . current_seasons () for season in seasons_list : if season . season_id == 2846 : print ( f 'Schedule for { season . series_name_short } ' f ' ( { season . season_year } S { season . season_quarter } )' ) for t in season . tracks : print ( f ' \\t Week { t . race_week } will take place at { t . name } ( { t . config } )' ) asyncio . run ( main ()) The Result Schedule for Advanced Mazda MX-5 Cup Series (2020 S3) Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit () Click Here For Code Breakdown from pyracing import Client The Client Class contains all that is necessary to begin accessing data from iRacing. username = 'iRacing username' password = 'iRacing password' ir = Client ( username , password ) We create an instance of Client and assign it to ir . list_of_season_objects = await ir . current_seasons () This is the core of retrieving data with pyracing. Here the current_seasons() method, with no parameters, returns data for all currently active seasons of iRacing. It returns a list of Season objects Using await Because this is asynchronous code, you must await the method. It tells the event_loop to leave the function and come back to it later while it sends the request. For more on asynchronous programming, we recommend the Complete Walkthrough from realpython.com for season in list_of_season_objects : if season . series_id == 231 : print ( f ' \\n Schedule for { season . series_name_short } ' # Line continuation f ' ( { season . season_year } S { season . season_quarter } )' ) Now that we have all of the data, the rest is figuring out what you want to do with it. In our example, we go through each season object and find the one that matches series_id of 231. Once we've found it, we print out the series_name_short for the series along with the season_year and season_quarter. This gives us the first line in the example below. for t in season . tracks : print ( f ' Week { t . race_week } will take place at { t . name } ( { t . config } )' ) In this case, our season object has a child object; season.tracks contains a list of the track objects with it's own set of attributes. Here, for each track that exists in season.tracks we nicely format a response that gives us the attributes we want for each track. Each track has a t.race_week for when that track will be active in the season, t.name for the full name of the track, and t.config for the configuration that will be used. Running an async function Normal Execution With a non-Windows OS, running the following example is very straightforward. asyncio . run ( main ()) The asyncio.run() function handles everything related to the event loop and will close itself after execution. Windows Execution Due to an issue with how HTTP requests are handling within the event loop on windows, we can't use the default loop provided by windows and we must create our own. loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) fut = loop . create_task ( main ()) loop . run_until_complete ( fut ) - loop = asyncio.new_event_loop() Creates a new event_loop and sets it to loop - asyncio.set_event_loop(loop) Sets event loop for asyncio to use for the duration of the script. - fut = loop.create_task(main()) Creates a 'future' object (The task to run main() ) - loop.run_until_complete(fut) Finally says \"run the event loop until fut has completed.","title":"Introduction"},{"location":"#about","text":"This package is an asynchronous API wrapper that handles everything necessary for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API for us to wrap; This is more like \"we pieced things together into something that resembles an API wrapper\" kind of wrapper. Note From the Author We understand that some users of this package will be looking to use this as a learning project and that asynchronous programming is a few steps ahead at the moment. If you fall into that category, you'll be relieved to know (maybe?) that we've writting this documentation with you in mind. If you get stuck, please see the contibuting page to join the discussion. We'd be happy to help! We hope to provide an identical synchronous version in the future, but for now the design choice was made with discord bots in mind. If you'd like more resources on asyncio, we recommend the overview guide of asyncio from RealPython .","title":"About"},{"location":"#basic-usage","text":"This example will print the season track schedule for the Advanced Mazda series. from pyracing.client import Client import asyncio username = 'iRacing username' password = 'iRacing password' # Authentication is automated and will be initiated on first request ir = Client ( username , password ) # Example async function with hardcoded results async def main (): seasons_list = await ir . current_seasons () for season in seasons_list : if season . season_id == 2846 : print ( f 'Schedule for { season . series_name_short } ' f ' ( { season . season_year } S { season . season_quarter } )' ) for t in season . tracks : print ( f ' \\t Week { t . race_week } will take place at { t . name } ( { t . config } )' ) asyncio . run ( main ()) The Result Schedule for Advanced Mazda MX-5 Cup Series (2020 S3) Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit () Click Here For Code Breakdown from pyracing import Client The Client Class contains all that is necessary to begin accessing data from iRacing. username = 'iRacing username' password = 'iRacing password' ir = Client ( username , password ) We create an instance of Client and assign it to ir . list_of_season_objects = await ir . current_seasons () This is the core of retrieving data with pyracing. Here the current_seasons() method, with no parameters, returns data for all currently active seasons of iRacing. It returns a list of Season objects Using await Because this is asynchronous code, you must await the method. It tells the event_loop to leave the function and come back to it later while it sends the request. For more on asynchronous programming, we recommend the Complete Walkthrough from realpython.com for season in list_of_season_objects : if season . series_id == 231 : print ( f ' \\n Schedule for { season . series_name_short } ' # Line continuation f ' ( { season . season_year } S { season . season_quarter } )' ) Now that we have all of the data, the rest is figuring out what you want to do with it. In our example, we go through each season object and find the one that matches series_id of 231. Once we've found it, we print out the series_name_short for the series along with the season_year and season_quarter. This gives us the first line in the example below. for t in season . tracks : print ( f ' Week { t . race_week } will take place at { t . name } ( { t . config } )' ) In this case, our season object has a child object; season.tracks contains a list of the track objects with it's own set of attributes. Here, for each track that exists in season.tracks we nicely format a response that gives us the attributes we want for each track. Each track has a t.race_week for when that track will be active in the season, t.name for the full name of the track, and t.config for the configuration that will be used. Running an async function Normal Execution With a non-Windows OS, running the following example is very straightforward. asyncio . run ( main ()) The asyncio.run() function handles everything related to the event loop and will close itself after execution. Windows Execution Due to an issue with how HTTP requests are handling within the event loop on windows, we can't use the default loop provided by windows and we must create our own. loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) fut = loop . create_task ( main ()) loop . run_until_complete ( fut ) - loop = asyncio.new_event_loop() Creates a new event_loop and sets it to loop - asyncio.set_event_loop(loop) Sets event loop for asyncio to use for the duration of the script. - fut = loop.create_task(main()) Creates a 'future' object (The task to run main() ) - loop.run_until_complete(fut) Finally says \"run the event loop until fut has completed.","title":"Basic Usage"},{"location":"contributing/","text":"Contributing (Under Construction) \u00b6 Please feel free to open issues, offer suggestions, or fork and submit a pull request. We only ask that you be willing to openly discuss things in a respectful manner. The contributors of this project use Discord as the primary means of communication; The iRacing Open Wheel server was created by the author of this project and hosts the channels for discussion there. When joining, please ask Jacob Anderson for the role to see the appropriate channels. Code Style \u00b6 This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS.","title":"Contributing"},{"location":"contributing/#contributing-under-construction","text":"Please feel free to open issues, offer suggestions, or fork and submit a pull request. We only ask that you be willing to openly discuss things in a respectful manner. The contributors of this project use Discord as the primary means of communication; The iRacing Open Wheel server was created by the author of this project and hosts the channels for discussion there. When joining, please ask Jacob Anderson for the role to see the appropriate channels.","title":"Contributing (Under Construction)"},{"location":"contributing/#code-style","text":"This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS.","title":"Code Style"},{"location":"methods/","text":"Which function for X data? \u00b6 Background Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it.. Warning We do not currently offer error handling in the event of an invalid input . Data returned from iRacing is mapped into objects based on the specific dictionary key values that they give us. When a reponse is an empty dictionary (due to an invalid input to iRacing) you will recieve an error. We plan to modify this to return a None object with a warning instead so that the program won't crash. Driver Data \u00b6 Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results() career_stats() \u00b6 Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return. driver_stats() \u00b6 Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'John Smitherson5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data driver_status() \u00b6 Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results. event_results() \u00b6 Returns a list of results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded. irating() \u00b6 Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here. last_races_stats() \u00b6 Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return. last_series() \u00b6 Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return. license_class() \u00b6 Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here. member_cars_driven() \u00b6 Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven. member_division() \u00b6 Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division. member_subsession_id_from_session() \u00b6 Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession. personal_bests() \u00b6 Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver. race_laps_driver() \u00b6 Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. stats_chart() \u00b6 Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access. ttrating() \u00b6 Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here. yearly_stats() \u00b6 Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return. Series Data \u00b6 Data returned from these methods return information about a series. Note On the topic of series_id and season_id : series_id refers to the specific configuration for a series that does not change. e.g. The \"Advanced Mazda MX-5 Cup Series\" has a series id of 231. It refers to the car, license, caution types, incident limits, and grid size. season_id refers to time period that a series will be active with a given track configuration. It is used to hold all the stats and races for a specific series during a season. The series referenced above had a season id of 2846 for the year 2020 quarter 3. active_op_counts() \u00b6 Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose. next_event() \u00b6 Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark. next_session_times() \u00b6 Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for. season_standings() \u00b6 Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. series_race_results() \u00b6 Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time. team_standings() \u00b6 ( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week. Session Data \u00b6 all_subsessions() \u00b6 Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for. private_results() \u00b6 Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module. race_guide() \u00b6 Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed. race_laps_all() \u00b6 Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. season_from_session() \u00b6 Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for subsession_data() \u00b6 Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return. total_registered_all() \u00b6 Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description Global Data \u00b6 car_class_by_id() \u00b6 Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\". current_seasons() \u00b6 Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id world_records() \u00b6 Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"List of Methods"},{"location":"methods/#which-function-for-x-data","text":"Background Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it.. Warning We do not currently offer error handling in the event of an invalid input . Data returned from iRacing is mapped into objects based on the specific dictionary key values that they give us. When a reponse is an empty dictionary (due to an invalid input to iRacing) you will recieve an error. We plan to modify this to return a None object with a warning instead so that the program won't crash.","title":"Which function for X data?"},{"location":"methods/#driver-data","text":"Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results()","title":"Driver Data"},{"location":"methods/#career_stats","text":"Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return.","title":"career_stats()"},{"location":"methods/#driver_stats","text":"Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'John Smitherson5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data","title":"driver_stats()"},{"location":"methods/#driver_status","text":"Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results.","title":"driver_status()"},{"location":"methods/#event_results","text":"Returns a list of results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded.","title":"event_results()"},{"location":"methods/#irating","text":"Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"irating()"},{"location":"methods/#last_races_stats","text":"Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return.","title":"last_races_stats()"},{"location":"methods/#last_series","text":"Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return.","title":"last_series()"},{"location":"methods/#license_class","text":"Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"license_class()"},{"location":"methods/#member_cars_driven","text":"Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven.","title":"member_cars_driven()"},{"location":"methods/#member_division","text":"Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division.","title":"member_division()"},{"location":"methods/#member_subsession_id_from_session","text":"Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession.","title":"member_subsession_id_from_session()"},{"location":"methods/#personal_bests","text":"Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver.","title":"personal_bests()"},{"location":"methods/#race_laps_driver","text":"Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_driver()"},{"location":"methods/#stats_chart","text":"Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access.","title":"stats_chart()"},{"location":"methods/#ttrating","text":"Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"ttrating()"},{"location":"methods/#yearly_stats","text":"Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return.","title":"yearly_stats()"},{"location":"methods/#series-data","text":"Data returned from these methods return information about a series. Note On the topic of series_id and season_id : series_id refers to the specific configuration for a series that does not change. e.g. The \"Advanced Mazda MX-5 Cup Series\" has a series id of 231. It refers to the car, license, caution types, incident limits, and grid size. season_id refers to time period that a series will be active with a given track configuration. It is used to hold all the stats and races for a specific series during a season. The series referenced above had a season id of 2846 for the year 2020 quarter 3.","title":"Series Data"},{"location":"methods/#active_op_counts","text":"Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose.","title":"active_op_counts()"},{"location":"methods/#next_event","text":"Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark.","title":"next_event()"},{"location":"methods/#next_session_times","text":"Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for.","title":"next_session_times()"},{"location":"methods/#season_standings","text":"Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module.","title":"season_standings()"},{"location":"methods/#series_race_results","text":"Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time.","title":"series_race_results()"},{"location":"methods/#team_standings","text":"( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week.","title":"team_standings()"},{"location":"methods/#session-data","text":"","title":"Session Data"},{"location":"methods/#all_subsessions","text":"Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for.","title":"all_subsessions()"},{"location":"methods/#private_results","text":"Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module.","title":"private_results()"},{"location":"methods/#race_guide","text":"Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed.","title":"race_guide()"},{"location":"methods/#race_laps_all","text":"Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_all()"},{"location":"methods/#season_from_session","text":"Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for","title":"season_from_session()"},{"location":"methods/#subsession_data","text":"Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return.","title":"subsession_data()"},{"location":"methods/#total_registered_all","text":"Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description","title":"total_registered_all()"},{"location":"methods/#global-data","text":"","title":"Global Data"},{"location":"methods/#car_class_by_id","text":"Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\".","title":"car_class_by_id()"},{"location":"methods/#current_seasons","text":"Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id","title":"current_seasons()"},{"location":"methods/#world_records","text":"Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"world_records()"},{"location":"modules/","text":"client \u00b6 The client module contains the Client() class which makes up the bulk of pyracing. For a detailed description of each class method, see the List of Functions wiki page. constants \u00b6 The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used. response_objects \u00b6 The response_objects sub-package is nothing but a collection of objects. JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data.","title":"Modules"},{"location":"modules/#client","text":"The client module contains the Client() class which makes up the bulk of pyracing. For a detailed description of each class method, see the List of Functions wiki page.","title":"client"},{"location":"modules/#constants","text":"The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used.","title":"constants"},{"location":"modules/#response_objects","text":"The response_objects sub-package is nothing but a collection of objects. JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data.","title":"response_objects"},{"location":"response-objects/active_op_count/","text":"active_op_count \u00b6 Data points returned from Client.active_op_counts() ActiveOPCount \u00b6 Attributes Type Example allow_entry str 'true' cars_left str '23' cat_id int 1 count_group int 35 count_registered str '17%3A35' count_total int 35 driver_change_param_1 int 0 driver_change_param_2 int 0 driver_change_rule int 0 driver_changes int 0 drivers_connected str '26' drivers_registered str '40' earth_rotation_speedup int 1 farm_id str '6' fog_density int 0 humidity int 55 leave_marbles int 0 pits str '33%2F60' pits_in_use int 33 pits_total int 60 race_panel_img str 'seriesid_259%2Flogo.jpg' rubber_practice str '' rubber_qualify str '' rubber_race str '' rubber_warmup str '' season_id int 2869 series_abbrv str 'PC' series_id int 259 series_name str 'PickUp+Cup' session_id int 135208115 skies int 1 subsession_id int 33679394 team_drivers_max int 1 team_drivers_min int 1 temp_unit int 0 temp_value int 78 time_of_day int 3 time_start str '00%3A56' time_start_sim str '2019-05-21+19%3A00' total_groups int 35 track_config str 'Oval' track_id int 40 track_name str %'5BLegacy%5D+Charlotte+Motor+Speedway+-+2008' weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2","title":"active_op_count"},{"location":"response-objects/active_op_count/#active_op_count","text":"Data points returned from Client.active_op_counts()","title":"active_op_count"},{"location":"response-objects/active_op_count/#activeopcount","text":"Attributes Type Example allow_entry str 'true' cars_left str '23' cat_id int 1 count_group int 35 count_registered str '17%3A35' count_total int 35 driver_change_param_1 int 0 driver_change_param_2 int 0 driver_change_rule int 0 driver_changes int 0 drivers_connected str '26' drivers_registered str '40' earth_rotation_speedup int 1 farm_id str '6' fog_density int 0 humidity int 55 leave_marbles int 0 pits str '33%2F60' pits_in_use int 33 pits_total int 60 race_panel_img str 'seriesid_259%2Flogo.jpg' rubber_practice str '' rubber_qualify str '' rubber_race str '' rubber_warmup str '' season_id int 2869 series_abbrv str 'PC' series_id int 259 series_name str 'PickUp+Cup' session_id int 135208115 skies int 1 subsession_id int 33679394 team_drivers_max int 1 team_drivers_min int 1 temp_unit int 0 temp_value int 78 time_of_day int 3 time_start str '00%3A56' time_start_sim str '2019-05-21+19%3A00' total_groups int 35 track_config str 'Oval' track_id int 40 track_name str %'5BLegacy%5D+Charlotte+Motor+Speedway+-+2008' weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2","title":"ActiveOPCount"},{"location":"response-objects/car_class/","text":"car_class \u00b6 Data points returned from Client.car_class() CarClass \u00b6 Attributes Type Example custid int 0 id int 1 lowername str 'skip+barber+race+series' name str 'Skip Barber Race Series' rel_speed int 40 shortname str 'SBRS' cars list See Car Car \u00b6 Attributes Type Example id int 1 name str 'Skip Barber Formula 2000'","title":"car_class"},{"location":"response-objects/car_class/#car_class","text":"Data points returned from Client.car_class()","title":"car_class"},{"location":"response-objects/car_class/#carclass","text":"Attributes Type Example custid int 0 id int 1 lowername str 'skip+barber+race+series' name str 'Skip Barber Race Series' rel_speed int 40 shortname str 'SBRS' cars list See Car","title":"CarClass"},{"location":"response-objects/car_class/#car","text":"Attributes Type Example id int 1 name str 'Skip Barber Formula 2000'","title":"Car"},{"location":"response-objects/career_stats/","text":"career_stats \u00b6 Data points returned from Client.career_stats() CareerStats \u00b6 Attributes Type Example category str 'Road' incidents_avg float 5.19 laps int 4818 laps_led int 101 laps_led_pcnt float 2.1 points_avg int 47 points_club int 1478 poles int 3 pos_finish_avg int 10 pos_start_avg int 10 starts int 282 top_5_pcnt float 25.89 top_5s int 73 win_pcnt float 1.77 wins int 5","title":"career_stats"},{"location":"response-objects/career_stats/#career_stats","text":"Data points returned from Client.career_stats()","title":"career_stats"},{"location":"response-objects/career_stats/#careerstats","text":"Attributes Type Example category str 'Road' incidents_avg float 5.19 laps int 4818 laps_led int 101 laps_led_pcnt float 2.1 points_avg int 47 points_club int 1478 poles int 3 pos_finish_avg int 10 pos_start_avg int 10 starts int 282 top_5_pcnt float 25.89 top_5s int 73 win_pcnt float 1.77 wins int 5","title":"CareerStats"},{"location":"response-objects/current_seasons/","text":"current_seasons \u00b6 Data points returned from Client.current_seasons() Season \u00b6 Attributes Type Example active bool True cat_id int 2 category int 2 date_end int 1599523200000 date_start int 1591660800000 is_lite bool False license_eligible bool True race_week int 8 season_id int 2846 season_quarter int 3 season_year int 2020 series_id int 231 series_lic_group_id int 3 series_name_short str 'Advanced Mazda MX-5 Cup Series' cars list See SeasonCar tracks list See Track car_classes list See SeasonCarClass SeasonCar \u00b6 Attribute Type Example id int 67 name str 'Global+Mazda+MX-5+Cup' name_lower str 'global mazda mx-5 cup' pkg_id int 182 sku int 10394 Track \u00b6 Attribute Type Example name str 'Brands Hatch Circuit' name_lower str 'brands hatch circuit' pkg_id int 91 priority int 1 race_week int 7 time_of_day int 2 config str 'Grand Prix' SeasonCarClass \u00b6 v0.1.0 Name Differences In v0.1.0 the names are custid , lowername , and shortname . In future releases they are updated to cust_id , name_lower , and name_short . Attribute Type Example custid int 0 id int 74 lowername str 'mazda+mx-5+cup+2016' name str 'Mazda MX-5 Cup 2016' rel_speed int 33 shortname str 'MX5 Cup 2016' cars list See Car tire_sets_dry_max int 0 Car \u00b6 Attribute Type Example id int 67 name str 'Global Mazda MX-5 Cup'","title":"current_seasons"},{"location":"response-objects/current_seasons/#current_seasons","text":"Data points returned from Client.current_seasons()","title":"current_seasons"},{"location":"response-objects/current_seasons/#season","text":"Attributes Type Example active bool True cat_id int 2 category int 2 date_end int 1599523200000 date_start int 1591660800000 is_lite bool False license_eligible bool True race_week int 8 season_id int 2846 season_quarter int 3 season_year int 2020 series_id int 231 series_lic_group_id int 3 series_name_short str 'Advanced Mazda MX-5 Cup Series' cars list See SeasonCar tracks list See Track car_classes list See SeasonCarClass","title":"Season"},{"location":"response-objects/current_seasons/#seasoncar","text":"Attribute Type Example id int 67 name str 'Global+Mazda+MX-5+Cup' name_lower str 'global mazda mx-5 cup' pkg_id int 182 sku int 10394","title":"SeasonCar"},{"location":"response-objects/current_seasons/#track","text":"Attribute Type Example name str 'Brands Hatch Circuit' name_lower str 'brands hatch circuit' pkg_id int 91 priority int 1 race_week int 7 time_of_day int 2 config str 'Grand Prix'","title":"Track"},{"location":"response-objects/current_seasons/#seasoncarclass","text":"v0.1.0 Name Differences In v0.1.0 the names are custid , lowername , and shortname . In future releases they are updated to cust_id , name_lower , and name_short . Attribute Type Example custid int 0 id int 74 lowername str 'mazda+mx-5+cup+2016' name str 'Mazda MX-5 Cup 2016' rel_speed int 33 shortname str 'MX5 Cup 2016' cars list See Car tire_sets_dry_max int 0","title":"SeasonCarClass"},{"location":"response-objects/current_seasons/#car","text":"Attribute Type Example id int 67 name str 'Global Mazda MX-5 Cup'","title":"Car"},{"location":"response-objects/driver_stats/","text":"driver_stats \u00b6 Data points returned from Client.driver_stats() DriverStats \u00b6 Attributes Type Example club_id int 33 club_name str 'Northwest' club_points int 1478 country_code str 'US' cust_id int 435144 display_name str 'Jacob Anderson7' field_size_avg int 20 group_letter str 'A' group_name str 'Class A' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_face_type int 0 helm_helmet_type int 0 helm_pattern int 65 incidents_avg float 5.19 irating int 2057 irating_rank int 14234 laps int 4818 laps_led int 101 license_class str 'A 3.20' license_class_id int 5 license_class_rank int 13931 license_level int 19 points int 13124 points_avg int 47 pos_finish_avg int 10 pos_start_avg int 10 rank int 5581 region str 'Region 4' row str '1' starts int 282 sub_level int 320 top_25_percent int 56 ttrating int 1378 ttrating_rank int 10484 wins int 5","title":"driver_stats"},{"location":"response-objects/driver_stats/#driver_stats","text":"Data points returned from Client.driver_stats()","title":"driver_stats"},{"location":"response-objects/driver_stats/#driverstats","text":"Attributes Type Example club_id int 33 club_name str 'Northwest' club_points int 1478 country_code str 'US' cust_id int 435144 display_name str 'Jacob Anderson7' field_size_avg int 20 group_letter str 'A' group_name str 'Class A' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_face_type int 0 helm_helmet_type int 0 helm_pattern int 65 incidents_avg float 5.19 irating int 2057 irating_rank int 14234 laps int 4818 laps_led int 101 license_class str 'A 3.20' license_class_id int 5 license_class_rank int 13931 license_level int 19 points int 13124 points_avg int 47 pos_finish_avg int 10 pos_start_avg int 10 rank int 5581 region str 'Region 4' row str '1' starts int 282 sub_level int 320 top_25_percent int 56 ttrating int 1378 ttrating_rank int 10484 wins int 5","title":"DriverStats"},{"location":"response-objects/event_results/","text":"event_results \u00b6 Data points returned from Client.event_results() EventResults \u00b6 Attributes Type Example car_class_id int 30 car_id int 33 category_id int 2 cust_id int 435144 date_start str '2020.06.20' display_name str 'Jacob Anderson7' event_type int 5 group_name str 'Class+A' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_license_level int 19 helm_pattern int 65 incidents int 3 lap_best str '1:14.971' lap_best_subsession str '1:14.119' lap_qual_best str '00.000' license_group int 5 official_session int 1 points_champ int 41 points_champ_sort int 41 points_club int 0 points_club_sort int 0 points_drop_race int 1 pos_finish int 11 pos_start int 4 race_week int 1 rank_session int 1 row_number int 25 season_id int 2866 season_quarter int 3 season_year int 2020 series_id int 260 session_id int 132876167 strength_of_field int 1644 subsession_id int 33057472 time_finished int 0 time_start str '08:00pm' time_start_raw int 1592683200000 track_id int 149 winner_display_name str 'Kent Neilson' winner_helm_color_1 str '003dff' winner_helm_color_2 str 'ffffff' winner_helm_color_3 str '0045ff' winner_helm_pattern int 66 winner_license_level int 20 winners_group_id int 425354","title":"event_results"},{"location":"response-objects/event_results/#event_results","text":"Data points returned from Client.event_results()","title":"event_results"},{"location":"response-objects/event_results/#eventresults","text":"Attributes Type Example car_class_id int 30 car_id int 33 category_id int 2 cust_id int 435144 date_start str '2020.06.20' display_name str 'Jacob Anderson7' event_type int 5 group_name str 'Class+A' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_license_level int 19 helm_pattern int 65 incidents int 3 lap_best str '1:14.971' lap_best_subsession str '1:14.119' lap_qual_best str '00.000' license_group int 5 official_session int 1 points_champ int 41 points_champ_sort int 41 points_club int 0 points_club_sort int 0 points_drop_race int 1 pos_finish int 11 pos_start int 4 race_week int 1 rank_session int 1 row_number int 25 season_id int 2866 season_quarter int 3 season_year int 2020 series_id int 260 session_id int 132876167 strength_of_field int 1644 subsession_id int 33057472 time_finished int 0 time_start str '08:00pm' time_start_raw int 1592683200000 track_id int 149 winner_display_name str 'Kent Neilson' winner_helm_color_1 str '003dff' winner_helm_color_2 str 'ffffff' winner_helm_color_3 str '0045ff' winner_helm_pattern int 66 winner_license_level int 20 winners_group_id int 425354","title":"EventResults"},{"location":"response-objects/last_races_stats/","text":"last_races_stats \u00b6 Data points returned from Client.last_races_stats() LastRacesStats \u00b6 Attributes Type Example date str '2020-07-25' incidents int 16 laps_led int 0 points_champ int 43 points_club int 0 pos_finish int 15 pos_start int 13 season_id int 2866 series_id int 260 strength_of_field int 1558 subsession_id int 33616345 time int 1595707200000 track str 'Aut\u00f3dromo Jos\u00e9 Carlos Pace' winner_cust_id int 19126 winner_laps_led int 20 winner_name str 'Charlie+Bass'","title":"last_races_stats"},{"location":"response-objects/last_races_stats/#last_races_stats","text":"Data points returned from Client.last_races_stats()","title":"last_races_stats"},{"location":"response-objects/last_races_stats/#lastracesstats","text":"Attributes Type Example date str '2020-07-25' incidents int 16 laps_led int 0 points_champ int 43 points_club int 0 pos_finish int 15 pos_start int 13 season_id int 2866 series_id int 260 strength_of_field int 1558 subsession_id int 33616345 time int 1595707200000 track str 'Aut\u00f3dromo Jos\u00e9 Carlos Pace' winner_cust_id int 19126 winner_laps_led int 20 winner_name str 'Charlie+Bass'","title":"LastRacesStats"},{"location":"response-objects/last_series/","text":"last_series \u00b6 Data points returned from Client.last_series() LastSeries \u00b6 Attributes Type Example car_class_id int 30 division int 2 incidents int 102 laps int 560 laps_led int 25 points_champ int 434 points_club int 434 pos_finish_avg int 9 pos_start_avg int 7 season_id int 2866 season_name str 'iRacing Grand Prix Series - 2020 Season 3' season_name_short str '2020 Season 3' series str 'iRacing Grand Prix Series' series_id int 260 series_name_short str 'iRacing Grand Prix Series' series_rank int 31 starts int 18 top_5s int 8 weeks int 6","title":"last_series"},{"location":"response-objects/last_series/#last_series","text":"Data points returned from Client.last_series()","title":"last_series"},{"location":"response-objects/last_series/#lastseries","text":"Attributes Type Example car_class_id int 30 division int 2 incidents int 102 laps int 560 laps_led int 25 points_champ int 434 points_club int 434 pos_finish_avg int 9 pos_start_avg int 7 season_id int 2866 season_name str 'iRacing Grand Prix Series - 2020 Season 3' season_name_short str '2020 Season 3' series str 'iRacing Grand Prix Series' series_id int 260 series_name_short str 'iRacing Grand Prix Series' series_rank int 31 starts int 18 top_5s int 8 weeks int 6","title":"LastSeries"},{"location":"response-objects/next_event/","text":"next_event \u00b6 Data points returned from Client.next_event() NextEvent \u00b6 Attributes Type Example driver_count int 10 season_id int 2844 session_id int 135215452 time_start datetime.datetime 2020-07-30 00:15:00","title":"next_event"},{"location":"response-objects/next_event/#next_event","text":"Data points returned from Client.next_event()","title":"next_event"},{"location":"response-objects/next_event/#nextevent","text":"Attributes Type Example driver_count int 10 season_id int 2844 session_id int 135215452 time_start datetime.datetime 2020-07-30 00:15:00","title":"NextEvent"},{"location":"response-objects/next_session_times/","text":"next_session_times \u00b6 Data points returned from Client.next_session_times() NextSessionTimes \u00b6 Attributes Type Example earth_rotation_speedup int 0 event_type_id int 4 fog_density int 0 group_count int 0 humidity int 55 leave_marbles int 1 max_to_display int 5 race_week int 7 race_week_cars dict {'33': {'maxPctFuelFill': 67, 'weightPenaltyKG': '', 'max_dry_tire_sets': '', 'powerAdjustPct': ''}} reg_count int 0 rubber_practice str '' rubber_qualify str '' rubber_race str '' rubber_warmup str '' season_id int 2866 session_id int 135215124 skies int 1 special_event_type int 0 temp_unit int 0 temp_value int 78 time_of_day int 1 time_start int 1596067560000 time_start_sim str '2020-08-01+08%3A20' total_count int 0 total_groups int 0 track_id int 319 weather_initial int 0 weather_ongoing int 0 weather_type int 0 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2","title":"next_session_times"},{"location":"response-objects/next_session_times/#next_session_times","text":"Data points returned from Client.next_session_times()","title":"next_session_times"},{"location":"response-objects/next_session_times/#nextsessiontimes","text":"Attributes Type Example earth_rotation_speedup int 0 event_type_id int 4 fog_density int 0 group_count int 0 humidity int 55 leave_marbles int 1 max_to_display int 5 race_week int 7 race_week_cars dict {'33': {'maxPctFuelFill': 67, 'weightPenaltyKG': '', 'max_dry_tire_sets': '', 'powerAdjustPct': ''}} reg_count int 0 rubber_practice str '' rubber_qualify str '' rubber_race str '' rubber_warmup str '' season_id int 2866 session_id int 135215124 skies int 1 special_event_type int 0 temp_unit int 0 temp_value int 78 time_of_day int 1 time_start int 1596067560000 time_start_sim str '2020-08-01+08%3A20' total_count int 0 total_groups int 0 track_id int 319 weather_initial int 0 weather_ongoing int 0 weather_type int 0 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2","title":"NextSessionTimes"},{"location":"response-objects/personal_bests/","text":"personal_bests \u00b6 Data points returned from Client.personal_bests() PersonalBests \u00b6 Attributes Type Example event_type str 'Practice' lap_best str '1:24.927' track_config str 'Grand Prix' track_id int 266 track_name str 'Autodromo Internazionale Enzo e Dino Ferrari'","title":"personal_bests"},{"location":"response-objects/personal_bests/#personal_bests","text":"Data points returned from Client.personal_bests()","title":"personal_bests"},{"location":"response-objects/personal_bests/#personalbests","text":"Attributes Type Example event_type str 'Practice' lap_best str '1:24.927' track_config str 'Grand Prix' track_id int 266 track_name str 'Autodromo Internazionale Enzo e Dino Ferrari'","title":"PersonalBests"},{"location":"response-objects/private_results/","text":"private_results \u00b6 Data points returned from Client.private_results() PrivateResults \u00b6 Attributes Type Example car_class_id int 79 car_ids str 72%2C117%2C118 cat_id int 2 created int 1594267926000 drivers_max int 60 fast_tows_num int 2 fixed_setup int 0 fog_density int 0 full_course_cautions int 0 hardcore_level int 0 host_cust_id int 94043 host_display_name str Nick Haeusler host_helmet_color_1 str 2A3795 host_helmet_color_2 str 060BDD host_helmet_color_3 str 4D6BC7 host_helmet_face_type int 0 host_helmet_helmet_type int 0 host_helmet_pattern int 8 host_license_level int 15 humidity int 63 incidents str ir_max int -1 ir_min int -1 lap_best str lic_level_max int -1 lic_level_min int -1 lonequalify int 0 multiclass int 1 pct_fuel_fills_max str 100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100 pos_finish str pos_finish_class str pos_start str pos_start_class str practice_length int 90 private int 0 qual_laps int 0 qual_length int 30 qual_setup_filenames str qual_setup_ids str race_laps int 126 race_length int 240 race_setup_filenames str race_setup_ids str race_time_finished int 1594390250000 restarts int 0 rolling_starts int 0 row int 1 session_fast_lap int 1215599 session_id int 134045275 session_id_private int 1790911 session_name str AOSC+Round+1+-+Silverstone skies int 1 subsession_id int 33375595 subsession_time_finished int 1594390551000 temp_unit int 1 temp_value float 18.333334 time_of_day int 0 time_start int 1594368005000 track str Silverstone Circuit track_id int 341 weather_type int 3 weight_penalties str 0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0 wind_direction int 6 wind_speed_unit int 1 wind_speed_value int 22 winner_display_name str Logitech G Altus Esports winner_display_names str Logitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports winner_group_id int -65804 winner_helmet_color_1 str 000000 winner_helmet_color_2 str ff281a winner_helmet_color_3 str 000000 winner_helmet_pattern int 65 winner_license_level int -1","title":"private_results"},{"location":"response-objects/private_results/#private_results","text":"Data points returned from Client.private_results()","title":"private_results"},{"location":"response-objects/private_results/#privateresults","text":"Attributes Type Example car_class_id int 79 car_ids str 72%2C117%2C118 cat_id int 2 created int 1594267926000 drivers_max int 60 fast_tows_num int 2 fixed_setup int 0 fog_density int 0 full_course_cautions int 0 hardcore_level int 0 host_cust_id int 94043 host_display_name str Nick Haeusler host_helmet_color_1 str 2A3795 host_helmet_color_2 str 060BDD host_helmet_color_3 str 4D6BC7 host_helmet_face_type int 0 host_helmet_helmet_type int 0 host_helmet_pattern int 8 host_license_level int 15 humidity int 63 incidents str ir_max int -1 ir_min int -1 lap_best str lic_level_max int -1 lic_level_min int -1 lonequalify int 0 multiclass int 1 pct_fuel_fills_max str 100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100%2C30%2C100%2C100 pos_finish str pos_finish_class str pos_start str pos_start_class str practice_length int 90 private int 0 qual_laps int 0 qual_length int 30 qual_setup_filenames str qual_setup_ids str race_laps int 126 race_length int 240 race_setup_filenames str race_setup_ids str race_time_finished int 1594390250000 restarts int 0 rolling_starts int 0 row int 1 session_fast_lap int 1215599 session_id int 134045275 session_id_private int 1790911 session_name str AOSC+Round+1+-+Silverstone skies int 1 subsession_id int 33375595 subsession_time_finished int 1594390551000 temp_unit int 1 temp_value float 18.333334 time_of_day int 0 time_start int 1594368005000 track str Silverstone Circuit track_id int 341 weather_type int 3 weight_penalties str 0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0%2C0.0 wind_direction int 6 wind_speed_unit int 1 wind_speed_value int 22 winner_display_name str Logitech G Altus Esports winner_display_names str Logitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports%2CLogitech+G+Altus+Esports winner_group_id int -65804 winner_helmet_color_1 str 000000 winner_helmet_color_2 str ff281a winner_helmet_color_3 str 000000 winner_helmet_pattern int 65 winner_license_level int -1","title":"PrivateResults"},{"location":"response-objects/race_guide/","text":"race_guide \u00b6 Data points returned from Client.race_guide() RaceGuide \u00b6 Attributes Type Example cat_id int 1 eligible bool True image str 'member_images%2Fseries%2Fseriesid_116%2Flogo.jpg' meets_participation_req int 0 season_schedule list See Schedule series_id int 116 series_name str 'Carburetor+Cup' Schedule \u00b6 Attributes Type Example car_class_ids list [50] fixed_setup bool True license_class int 1 multi_class bool False open_practice_drivers int 8 open_practice_sessions int 10 race list See Race season_id int 2867 season_start_date int 1591660800000 Race \u00b6 Attributes Type Example earth_rotation_speedup int 1 event_type int 5 fog_density int 0 humidity int 55 race_lap_limit int 15 race_time_limit_minutes int -1 race_week int 7 reg_count int 6 reg_count_pre int 0 session_id int 135216789 session_type_id int 278 skies int 1 special_event_type int 0 standing_start bool False temp_unit int 0 temp_value int 78 time_end int 1596070831000 time_of_day int 9 time_start int 1596069900000 time_start_sim str 2019-05-21+12%3A00 track str %5BLegacy%5D+Pocono+Raceway+-+2009 track_config str Oval track_id int 136 track_race_guide_img str '' weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2 race_week_cars dict {} rubber_settings dict {}","title":"race_guide"},{"location":"response-objects/race_guide/#race_guide","text":"Data points returned from Client.race_guide()","title":"race_guide"},{"location":"response-objects/race_guide/#raceguide","text":"Attributes Type Example cat_id int 1 eligible bool True image str 'member_images%2Fseries%2Fseriesid_116%2Flogo.jpg' meets_participation_req int 0 season_schedule list See Schedule series_id int 116 series_name str 'Carburetor+Cup'","title":"RaceGuide"},{"location":"response-objects/race_guide/#schedule","text":"Attributes Type Example car_class_ids list [50] fixed_setup bool True license_class int 1 multi_class bool False open_practice_drivers int 8 open_practice_sessions int 10 race list See Race season_id int 2867 season_start_date int 1591660800000","title":"Schedule"},{"location":"response-objects/race_guide/#race","text":"Attributes Type Example earth_rotation_speedup int 1 event_type int 5 fog_density int 0 humidity int 55 race_lap_limit int 15 race_time_limit_minutes int -1 race_week int 7 reg_count int 6 reg_count_pre int 0 session_id int 135216789 session_type_id int 278 skies int 1 special_event_type int 0 standing_start bool False temp_unit int 0 temp_value int 78 time_end int 1596070831000 time_of_day int 9 time_start int 1596069900000 time_start_sim str 2019-05-21+12%3A00 track str %5BLegacy%5D+Pocono+Raceway+-+2009 track_config str Oval track_id int 136 track_race_guide_img str '' weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2 race_week_cars dict {} rubber_settings dict {}","title":"Race"},{"location":"response-objects/race_laps_all/","text":"race_laps_all \u00b6 Data points returned from Client.race_laps_all() RaceLapsAll \u00b6 Attributes Type Example details object See Details driver list See Driver lap_data list See LapData Details \u00b6 Attributes Type Example date str 2020-06-20 date_unix_utc_ms int 1592683200000 driver_changes bool False event_type int 5 event_type_name str Race laps_for_qual_avg int 2 laps_for_solo_avg int 5 official int 1 private_session_id int -1 private_session_name str '' race_panel_img str 'member_images%2Fseries%2Fseriesid_260%2Flogo.jpg' race_week int 1 season_id int 2866 season_name str 'iRacing+Grand+Prix+Series+-+2020+Season+3' season_name_short str '2020+Season+3' series_name str 'iRacing+Grand+Prix+Series' series_name_short str 'iRacing+Grand+Prix+Series' session_id int 132876167 subsession_id int 33057472 track str 'Circuit+Park+Zandvoort' track_config str 'Grand+Prix' track_id int 149 Driver \u00b6 Attributes Type Example car_num str '9' cust_id int 425354 display_name str 'Kent+Neilson' friend int 1 group_id int 425354 helmet_color_1 str '003dff' helmet_color_2 str 'ffffff' helmet_color_3 str '0045ff' helmet_pattern int 66 incidents int 0 lap_avg int 755884 lap_best_num int 23 lap_best_time int 741191 license_color str '0153db' points_champ int 101 pos_finish int 0 pos_start int 0 watch int 0 LapData \u00b6 Attributes Type Example car_num str '9' cust_id int 425354 flags int 0 lap_num int 0 time_ses int 966667","title":"race_laps_all"},{"location":"response-objects/race_laps_all/#race_laps_all","text":"Data points returned from Client.race_laps_all()","title":"race_laps_all"},{"location":"response-objects/race_laps_all/#racelapsall","text":"Attributes Type Example details object See Details driver list See Driver lap_data list See LapData","title":"RaceLapsAll"},{"location":"response-objects/race_laps_all/#details","text":"Attributes Type Example date str 2020-06-20 date_unix_utc_ms int 1592683200000 driver_changes bool False event_type int 5 event_type_name str Race laps_for_qual_avg int 2 laps_for_solo_avg int 5 official int 1 private_session_id int -1 private_session_name str '' race_panel_img str 'member_images%2Fseries%2Fseriesid_260%2Flogo.jpg' race_week int 1 season_id int 2866 season_name str 'iRacing+Grand+Prix+Series+-+2020+Season+3' season_name_short str '2020+Season+3' series_name str 'iRacing+Grand+Prix+Series' series_name_short str 'iRacing+Grand+Prix+Series' session_id int 132876167 subsession_id int 33057472 track str 'Circuit+Park+Zandvoort' track_config str 'Grand+Prix' track_id int 149","title":"Details"},{"location":"response-objects/race_laps_all/#driver","text":"Attributes Type Example car_num str '9' cust_id int 425354 display_name str 'Kent+Neilson' friend int 1 group_id int 425354 helmet_color_1 str '003dff' helmet_color_2 str 'ffffff' helmet_color_3 str '0045ff' helmet_pattern int 66 incidents int 0 lap_avg int 755884 lap_best_num int 23 lap_best_time int 741191 license_color str '0153db' points_champ int 101 pos_finish int 0 pos_start int 0 watch int 0","title":"Driver"},{"location":"response-objects/race_laps_all/#lapdata","text":"Attributes Type Example car_num str '9' cust_id int 425354 flags int 0 lap_num int 0 time_ses int 966667","title":"LapData"},{"location":"response-objects/race_laps_driver/","text":"race_laps_driver \u00b6 Data points returned from Client.race_laps_driver() RaceLapsDriver \u00b6 Attributes Type Example drivers list See Driver header object See Header lap_data list See Lap Driver \u00b6 Attributes Type Example cust_id int 435144 display_name str 'Jacob+Anderson7' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_pattern int 65 lap_best int 742635 lap_best_n int 3 lap_qual_best int -1 lap_qual_best_at int 0 lap_qual_best_n int -1 laps_n_best_num int -1 laps_n_best_time int -1 license_level int 19 Header \u00b6 Attributes Type Example car_color_1 str '111111' car_color_2 str '65b82f' car_color_3 str '172c59' car_id int 33 car_num str '4' car_pattern int 1 date_unix_utc_ms int 1595707200000 event_date str '2020-07-25' event_type int 5 event_type_name str 'Race' laps_for_qual int 2 laps_for_solo int 5 season_name str 'iRacing+Grand+Prix+Series+-+2020+Season+3' season_name_short str '2020+Season+3' series_name str 'iRacing+Grand+Prix+Series' series_name_short str 'iRacing+Grand+Prix+Series' session_id int 134968003 subsession_id int 33616345 suit_color_1 str '111111' suit_color_2 str '000000' suit_color_3 str '32713a' suit_pattern int 1 team_name str '' track_config str 'Grand+Prix' track_id int 212 track_name str 'Aut%C3%B3dromo+Jos%C3%A9+Carlos+Pace' LapData \u00b6 Attributes Type Example cust_id int 435144 flags int 0 lap_num int 0 time_ses int 1078620","title":"race_laps_driver"},{"location":"response-objects/race_laps_driver/#race_laps_driver","text":"Data points returned from Client.race_laps_driver()","title":"race_laps_driver"},{"location":"response-objects/race_laps_driver/#racelapsdriver","text":"Attributes Type Example drivers list See Driver header object See Header lap_data list See Lap","title":"RaceLapsDriver"},{"location":"response-objects/race_laps_driver/#driver","text":"Attributes Type Example cust_id int 435144 display_name str 'Jacob+Anderson7' helm_color_1 str '111111' helm_color_2 str '65b82f' helm_color_3 str '172c59' helm_pattern int 65 lap_best int 742635 lap_best_n int 3 lap_qual_best int -1 lap_qual_best_at int 0 lap_qual_best_n int -1 laps_n_best_num int -1 laps_n_best_time int -1 license_level int 19","title":"Driver"},{"location":"response-objects/race_laps_driver/#header","text":"Attributes Type Example car_color_1 str '111111' car_color_2 str '65b82f' car_color_3 str '172c59' car_id int 33 car_num str '4' car_pattern int 1 date_unix_utc_ms int 1595707200000 event_date str '2020-07-25' event_type int 5 event_type_name str 'Race' laps_for_qual int 2 laps_for_solo int 5 season_name str 'iRacing+Grand+Prix+Series+-+2020+Season+3' season_name_short str '2020+Season+3' series_name str 'iRacing+Grand+Prix+Series' series_name_short str 'iRacing+Grand+Prix+Series' session_id int 134968003 subsession_id int 33616345 suit_color_1 str '111111' suit_color_2 str '000000' suit_color_3 str '32713a' suit_pattern int 1 team_name str '' track_config str 'Grand+Prix' track_id int 212 track_name str 'Aut%C3%B3dromo+Jos%C3%A9+Carlos+Pace'","title":"Header"},{"location":"response-objects/race_laps_driver/#lapdata","text":"Attributes Type Example cust_id int 435144 flags int 0 lap_num int 0 time_ses int 1078620","title":"LapData"},{"location":"response-objects/season_standings/","text":"season_standings \u00b6 Data points returned from Client.season_standings() SeasonStandings \u00b6 Attributes Type Example club_id int 36 club_name str 'UK and I' country str 'United Kingdom' country_code str 'GB' country_name str 'United+Kingdom' cust_id int 55441 display_name str 'Mark Ussher' division int 0 dropped int 0 helm_color_1 str '0116bf' helm_color_2 str 'ffffff' helm_color_3 str '46b8f4' helm_pattern int 14 incidents int 65 irating int 5619 laps int 613 laps_led int 308 license_level_max int 20 points int 1212 poles int 9 pos int 1 pos_finish_avg int 6 pos_start_avg int 3 rank int 1 row int 1 starts int 16 sub_level str '4.87' top_fives int 12 week int 0 wins int 7","title":"season_standings"},{"location":"response-objects/season_standings/#season_standings","text":"Data points returned from Client.season_standings()","title":"season_standings"},{"location":"response-objects/season_standings/#seasonstandings","text":"Attributes Type Example club_id int 36 club_name str 'UK and I' country str 'United Kingdom' country_code str 'GB' country_name str 'United+Kingdom' cust_id int 55441 display_name str 'Mark Ussher' division int 0 dropped int 0 helm_color_1 str '0116bf' helm_color_2 str 'ffffff' helm_color_3 str '46b8f4' helm_pattern int 14 incidents int 65 irating int 5619 laps int 613 laps_led int 308 license_level_max int 20 points int 1212 poles int 9 pos int 1 pos_finish_avg int 6 pos_start_avg int 3 rank int 1 row int 1 starts int 16 sub_level str '4.87' top_fives int 12 week int 0 wins int 7","title":"SeasonStandings"},{"location":"response-objects/series_race_results/","text":"series_race_results \u00b6 Data points returned from Client.series_race_results() SeriesRaceResults \u00b6 Attributes Type Example car_class_id int 30 official int 0 session_id int 132171426 size_of_field int 2 strength_of_field int 1552 subsession_id int 32855187 time_start int 1591668000000 track_id int 163","title":"series_race_results"},{"location":"response-objects/series_race_results/#series_race_results","text":"Data points returned from Client.series_race_results()","title":"series_race_results"},{"location":"response-objects/series_race_results/#seriesraceresults","text":"Attributes Type Example car_class_id int 30 official int 0 session_id int 132171426 size_of_field int 2 strength_of_field int 1552 subsession_id int 32855187 time_start int 1591668000000 track_id int 163","title":"SeriesRaceResults"},{"location":"response-objects/subsession_data/","text":"subsession_data \u00b6 Data points returned from Client.subsession_data() SubSessionData \u00b6 Attributes Type Example cat_id int 1 caution_laps int 18 caution_type int 3 cautions int 6 corners_total int 4 driver_change_param_1 int -1 driver_change_param_2 int -1 driver_change_rule int 0 driver_changes int 0 event_type int 5 fog_density int 0 humidity int 55 lap_avg int 696237 laps_completed int 50 laps_for_qual_avg int 2 laps_for_solo_avg int 10 lead_changes int 3 league_id str '' league_season_id str '' leave_marbles int 1 max_weeks int 13 points_type str race private_session_id int -1 race_week int 7 reserve_status str '' rubber_practice int -1 rubber_qualify int -1 rubber_race int -1 rubber_warmup int -1 season_id int 2844 season_name str INDYCAR+Series+-+Oval+-+2020+Season+3+Fixed season_name_short str 2020+Season+3+Fixed season_quarter int 3 season_year int 2020 series_id int 165 series_name str IndyCar+Series+-+Oval+-+Fixed series_name_short str IndyCar+Series+-+Oval+-+Fixed session_id int 135205454 session_name str '' sim_ses_type int 3 skies int 1 special_event_type int -1 special_event_type_text str '' strength_of_field int 1517 subsession_id int 33679352 team_drivers_max int 1 team_drivers_min int 1 temp_unit int 0 temp_value int 78 time_of_day int 2 time_start str 2020-07-29+20%3A15%3A00 time_start_sim str 2020-07-14+15%3A05 track str Pocono+Raceway track_config str N%2FA track_id int 277 weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2 driver list See Driver Driver \u00b6 Attributes Type Example car_class_id int 117 car_class_name str 'Dallara+IR18' car_class_name_short str 'Dallara+IR18' car_color_1 str 'ffffff' car_color_2 str 'cccccc' car_color_3 str '666666' car_id int 99 car_num str '23' car_num_font int 0 car_num_slant int 0 car_number_color_1 str 'ffffff' car_number_color_2 str 'cccccc' car_number_color_3 str '666666' car_pattern int 0 car_sponser_1 int 0 car_sponser_2 int 0 club_id int 17 club_name str 'Virginias' club_name_short str 'Virginias' club_points int 0 cpi_new float 18.8930492 cpi_old float 19.7769318 cust_id int 383175 damage_model int 0 display_name str 'Joseph+Lester' division int 3 division_name str 'Bronze+Division' drop_race int 0 event_type_name str 'Race' group_id int 383175 heat_info_id int -1 helm_color_1 str 'ffffff' helm_color_2 str 'fc1406' helm_color_3 str '06baf5' helm_pattern int 2 host_id str '' incidents int 0 interval int 0 interval_class int 0 irating_new int 1280 irating_old int 1316 lap_avg int 432343 lap_best int 432343 lap_best_n int 1 lap_qual_best int -1 lap_qual_best_at int 0 lap_qual_best_n int -1 lap_qual_best_time int -1 laps_best_n_num int -1 laps_best_n_time int -1 laps_comp int 1 laps_led int 0 laps_opt_comp int 0 league_points str '' license_category str 'Oval' license_change_oval int -1 license_change_road int -1 license_class int 3 license_level_new int 13 license_level_old int 13 multiplier int 1 official int 1 pct_fuel_fill_max int -1 points_champ int 0 points_champ_agg int 24 pos int 0 pos_finish int 0 pos_finish_class int 0 pos_start int -1 reason_out str 'Running' reason_out_id int 0 restrict_results str '' sim_ses_name str 'PRACTICE' sim_ses_num int -2 sim_ses_type_name str 'Open+Practice' sub_level_new int 126 sub_level_old int 133 suit_color_1 str 'ffffff' suit_color_2 str 'fc1406' suit_color_3 str '059fff' suit_pattern int 1 time_session_start int 1596053700000 track_cat_id int 1 track_category str 'Oval' ttrating_new int 1362 ttrating_old int 1362 vehicle_key_id int 5203 weight_penalty_kg int -1 wheel_chrome int -1 wheel_color str 'N%2FA'","title":"subsession_data"},{"location":"response-objects/subsession_data/#subsession_data","text":"Data points returned from Client.subsession_data()","title":"subsession_data"},{"location":"response-objects/subsession_data/#subsessiondata","text":"Attributes Type Example cat_id int 1 caution_laps int 18 caution_type int 3 cautions int 6 corners_total int 4 driver_change_param_1 int -1 driver_change_param_2 int -1 driver_change_rule int 0 driver_changes int 0 event_type int 5 fog_density int 0 humidity int 55 lap_avg int 696237 laps_completed int 50 laps_for_qual_avg int 2 laps_for_solo_avg int 10 lead_changes int 3 league_id str '' league_season_id str '' leave_marbles int 1 max_weeks int 13 points_type str race private_session_id int -1 race_week int 7 reserve_status str '' rubber_practice int -1 rubber_qualify int -1 rubber_race int -1 rubber_warmup int -1 season_id int 2844 season_name str INDYCAR+Series+-+Oval+-+2020+Season+3+Fixed season_name_short str 2020+Season+3+Fixed season_quarter int 3 season_year int 2020 series_id int 165 series_name str IndyCar+Series+-+Oval+-+Fixed series_name_short str IndyCar+Series+-+Oval+-+Fixed session_id int 135205454 session_name str '' sim_ses_type int 3 skies int 1 special_event_type int -1 special_event_type_text str '' strength_of_field int 1517 subsession_id int 33679352 team_drivers_max int 1 team_drivers_min int 1 temp_unit int 0 temp_value int 78 time_of_day int 2 time_start str 2020-07-29+20%3A15%3A00 time_start_sim str 2020-07-14+15%3A05 track str Pocono+Raceway track_config str N%2FA track_id int 277 weather_initial int 0 weather_ongoing int 0 weather_type int 3 wind_direction int 0 wind_speed_unit int 0 wind_speed_value int 2 driver list See Driver","title":"SubSessionData"},{"location":"response-objects/subsession_data/#driver","text":"Attributes Type Example car_class_id int 117 car_class_name str 'Dallara+IR18' car_class_name_short str 'Dallara+IR18' car_color_1 str 'ffffff' car_color_2 str 'cccccc' car_color_3 str '666666' car_id int 99 car_num str '23' car_num_font int 0 car_num_slant int 0 car_number_color_1 str 'ffffff' car_number_color_2 str 'cccccc' car_number_color_3 str '666666' car_pattern int 0 car_sponser_1 int 0 car_sponser_2 int 0 club_id int 17 club_name str 'Virginias' club_name_short str 'Virginias' club_points int 0 cpi_new float 18.8930492 cpi_old float 19.7769318 cust_id int 383175 damage_model int 0 display_name str 'Joseph+Lester' division int 3 division_name str 'Bronze+Division' drop_race int 0 event_type_name str 'Race' group_id int 383175 heat_info_id int -1 helm_color_1 str 'ffffff' helm_color_2 str 'fc1406' helm_color_3 str '06baf5' helm_pattern int 2 host_id str '' incidents int 0 interval int 0 interval_class int 0 irating_new int 1280 irating_old int 1316 lap_avg int 432343 lap_best int 432343 lap_best_n int 1 lap_qual_best int -1 lap_qual_best_at int 0 lap_qual_best_n int -1 lap_qual_best_time int -1 laps_best_n_num int -1 laps_best_n_time int -1 laps_comp int 1 laps_led int 0 laps_opt_comp int 0 league_points str '' license_category str 'Oval' license_change_oval int -1 license_change_road int -1 license_class int 3 license_level_new int 13 license_level_old int 13 multiplier int 1 official int 1 pct_fuel_fill_max int -1 points_champ int 0 points_champ_agg int 24 pos int 0 pos_finish int 0 pos_finish_class int 0 pos_start int -1 reason_out str 'Running' reason_out_id int 0 restrict_results str '' sim_ses_name str 'PRACTICE' sim_ses_num int -2 sim_ses_type_name str 'Open+Practice' sub_level_new int 126 sub_level_old int 133 suit_color_1 str 'ffffff' suit_color_2 str 'fc1406' suit_color_3 str '059fff' suit_pattern int 1 time_session_start int 1596053700000 track_cat_id int 1 track_category str 'Oval' ttrating_new int 1362 ttrating_old int 1362 vehicle_key_id int 5203 weight_penalty_kg int -1 wheel_chrome int -1 wheel_color str 'N%2FA'","title":"Driver"},{"location":"response-objects/world_records/","text":"world_records \u00b6 Data points returned from Client.world_records() WorldRecord \u00b6 Attributes Type Example car_id int 33 cat_id int 2 category str 'Road' club_id int 41 club_name str 'Italy' country_code str 'IT' cust_id int 297304 display_name str 'Marco Sanfilippo' helm_color_1 str 'D4AF37' helm_color_2 str 'FFFFFF' helm_color_3 str '000000' helm_pattern int 64 irating int 4693 license_class str 'A 4.99' license_class_id int 5 license_level int 20 practice str '1:08.065' practice_start_time int 1563628621000 practice_subsession_id int 27864149 qualify str '1:08.252' qualify_subsession_id int 27864491 qualify_time_start int 1563631200000 race str '1:08.675' race_start_time int 1563631200000 race_subsession_id int 27864491 region str 'Region 6' row int 1 season_quarter str '3' season_year str '2019' sub_level int 499 timetrial str '' track_id int 319 tt_start_time int 0 tt_subsession_id int '' ttrating int 1350","title":"world_records"},{"location":"response-objects/world_records/#world_records","text":"Data points returned from Client.world_records()","title":"world_records"},{"location":"response-objects/world_records/#worldrecord","text":"Attributes Type Example car_id int 33 cat_id int 2 category str 'Road' club_id int 41 club_name str 'Italy' country_code str 'IT' cust_id int 297304 display_name str 'Marco Sanfilippo' helm_color_1 str 'D4AF37' helm_color_2 str 'FFFFFF' helm_color_3 str '000000' helm_pattern int 64 irating int 4693 license_class str 'A 4.99' license_class_id int 5 license_level int 20 practice str '1:08.065' practice_start_time int 1563628621000 practice_subsession_id int 27864149 qualify str '1:08.252' qualify_subsession_id int 27864491 qualify_time_start int 1563631200000 race str '1:08.675' race_start_time int 1563631200000 race_subsession_id int 27864491 region str 'Region 6' row int 1 season_quarter str '3' season_year str '2019' sub_level int 499 timetrial str '' track_id int 319 tt_start_time int 0 tt_subsession_id int '' ttrating int 1350","title":"WorldRecord"},{"location":"response-objects/yearly_stats/","text":"yearly_stats \u00b6 Data points returned from Client.yearly_stats() YearlyStats \u00b6 Attributes Type Example category str 'Road' incidents_avg float 5.19 laps int 4818 laps_led int 101 laps_led_pcnt float 2.1 points_avg int 47 points_club int 1502 poles int 3 pos_finish_avg int 10 pos_start_avg int 10 starts int 282 top_5_pcnt float 25.89 top_5s int 73 win_pcnt float 1.77 wins int 5 year str '2020'","title":"yearly_stats"},{"location":"response-objects/yearly_stats/#yearly_stats","text":"Data points returned from Client.yearly_stats()","title":"yearly_stats"},{"location":"response-objects/yearly_stats/#yearlystats","text":"Attributes Type Example category str 'Road' incidents_avg float 5.19 laps int 4818 laps_led int 101 laps_led_pcnt float 2.1 points_avg int 47 points_club int 1502 poles int 3 pos_finish_avg int 10 pos_start_avg int 10 starts int 282 top_5_pcnt float 25.89 top_5s int 73 win_pcnt float 1.77 wins int 5 year str '2020'","title":"YearlyStats"}]}