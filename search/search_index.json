{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This package is an API wrapper/client for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API. However, we've done our best to build something that might resemble an actual API. Basic Usage \u00b6 Due to existing bugs with how asyncio event loops interact with Windows, you execute code will differ depending on your OS: Running an async function Normal Execution With a non-Windows OS, running the following example is very straightforward. asyncio . run ( main ()) The asyncio.run() function handles everything related to the event loop and will close itself after execution. Windows Execution Due to an issue with how HTTP requests are handling within the event loop on windows, we can't use the default loop provided by windows and we must create our own. loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) fut = loop . create_task ( main ()) loop . run_until_complete ( fut ) - loop = asyncio.new_event_loop() Creates a new event_loop and sets it to loop - asyncio.set_event_loop(loop) Sets event loop for asyncio to use for the duration of the script. - fut = loop.create_task(main()) Creates a 'future' object (The task to run main() ) - loop.run_until_complete(fut) Finally says \"run the event loop until fut has completed. from pyracing import Client import asyncio username = \"iRacing username\" password = 'iRacing password' # Authentication is automated and will be initiated on first request ir = Client ( username , password ) # Example async function with hardcoded results async def main (): list_of_season_objects = await ir . current_seasons () for season in list_of_season_objects : if season . series_id == 231 : print ( f ' \\n Schedule for { season . series_name_short } ' f ' ( { season . season_year } S { season . season_quarter } )' ) for t in season . tracks : print ( f ' Week { t . race_week } will take place at { t . name } ( { t . config } )' ) Click Here For Code Breakdown The Client Class contains all the methods necessary to access data from iRacing. from pyracing import Client We create an instance of Client and assign it to ir . username = 'iRacing username' password = 'iRacing password' ir = Client ( username , password ) # Authentication is automated and initiated on first request list_of_season_objects = await ir . current_seasons () The result will be Schedule for Advanced Mazda MX-5 Cup Series Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit ()","title":"Home"},{"location":"#introduction","text":"This package is an API wrapper/client for retrieving data from iRacing. We use the term \"wrapper\" loosely because iRacing does not yet have an officially documented API. However, we've done our best to build something that might resemble an actual API.","title":"Introduction"},{"location":"#basic-usage","text":"Due to existing bugs with how asyncio event loops interact with Windows, you execute code will differ depending on your OS: Running an async function Normal Execution With a non-Windows OS, running the following example is very straightforward. asyncio . run ( main ()) The asyncio.run() function handles everything related to the event loop and will close itself after execution. Windows Execution Due to an issue with how HTTP requests are handling within the event loop on windows, we can't use the default loop provided by windows and we must create our own. loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) fut = loop . create_task ( main ()) loop . run_until_complete ( fut ) - loop = asyncio.new_event_loop() Creates a new event_loop and sets it to loop - asyncio.set_event_loop(loop) Sets event loop for asyncio to use for the duration of the script. - fut = loop.create_task(main()) Creates a 'future' object (The task to run main() ) - loop.run_until_complete(fut) Finally says \"run the event loop until fut has completed. from pyracing import Client import asyncio username = \"iRacing username\" password = 'iRacing password' # Authentication is automated and will be initiated on first request ir = Client ( username , password ) # Example async function with hardcoded results async def main (): list_of_season_objects = await ir . current_seasons () for season in list_of_season_objects : if season . series_id == 231 : print ( f ' \\n Schedule for { season . series_name_short } ' f ' ( { season . season_year } S { season . season_quarter } )' ) for t in season . tracks : print ( f ' Week { t . race_week } will take place at { t . name } ( { t . config } )' ) Click Here For Code Breakdown The Client Class contains all the methods necessary to access data from iRacing. from pyracing import Client We create an instance of Client and assign it to ir . username = 'iRacing username' password = 'iRacing password' ir = Client ( username , password ) # Authentication is automated and initiated on first request list_of_season_objects = await ir . current_seasons () The result will be Schedule for Advanced Mazda MX-5 Cup Series Week 0 will take place at Road Atlanta (Full Course) Week 1 will take place at Circuit Gilles Villeneuve () Week 2 will take place at Road America (Full Course) Week 3 will take place at Lime Rock Park (Grand Prix) Week 4 will take place at Barber Motorsports Park (Full Course) Week 5 will take place at Suzuka International Racing Course (Grand Prix) Week 6 will take place at N\u00fcrburgring Combined (Gesamtstrecke Short w/out Arena) Week 7 will take place at Brands Hatch Circuit (Grand Prix) Week 8 will take place at Autodromo Internazionale Enzo e Dino Ferrari (Grand Prix) Week 9 will take place at Watkins Glen International (Boot) Week 10 will take place at Sebring International Raceway (International) Week 11 will take place at Autodromo Nazionale Monza (Grand Prix) Week 12 will take place at Mount Panorama Circuit ()","title":"Basic Usage"},{"location":"contributing/","text":"Contributing (Under Construction) \u00b6 Please feel free to open issues, offer suggestions, or fork and submit a pull request. We only ask that you be willing to openly discuss things in a respectful manner. The contributors of this project use Discord as the primary means of communication; The iRacing Open Wheel server was created by the author of this project and hosts the channels for discussion there. When joining, please ask Jacob Anderson for the role to see the appropriate channels. Code Style \u00b6 This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS.","title":"Contributing"},{"location":"contributing/#contributing-under-construction","text":"Please feel free to open issues, offer suggestions, or fork and submit a pull request. We only ask that you be willing to openly discuss things in a respectful manner. The contributors of this project use Discord as the primary means of communication; The iRacing Open Wheel server was created by the author of this project and hosts the channels for discussion there. When joining, please ask Jacob Anderson for the role to see the appropriate channels.","title":"Contributing (Under Construction)"},{"location":"contributing/#code-style","text":"This Repo follows the PEP8 Styleguide. Line lengths are 79 characters. Variable names use snake_case. Class names use CamelCase. (CapitalizedWords) Constants use ALL_CAPS.","title":"Code Style"},{"location":"functions/","text":"Which function for X data? \u00b6 Background-information Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it.. Warning We do not currently offer error handling in the event of an invalid input. Driver Data \u00b6 Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results() career_stats() \u00b6 Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return. driver_stats() \u00b6 Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'Driver Full Name5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data driver_status() \u00b6 Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results. event_results() \u00b6 Returns a list of event results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded. irating() \u00b6 Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here. last_races_stats() \u00b6 Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return. last_series() \u00b6 Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return. license_class() \u00b6 Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here. member_cars_driven() \u00b6 Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven. member_division() \u00b6 Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division. member_subsession_id_from_session() \u00b6 Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession. personal_bests() \u00b6 Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver. race_laps_driver() \u00b6 Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. stats_chart() \u00b6 Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access. ttrating() \u00b6 Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here. yearly_stats() \u00b6 Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return. Series Data \u00b6 Data returned from these methods return information about a series. Note On the topic of series_id and season_id : series_id refers to the specific configuration for a series that does not change. e.g. The \"Advanced Mazda MX-5 Cup Series\" has a series id of 231. It refers to the car, license, caution types, incident limits, and grid size. season_id refers to time period that a series will be active with a given track configuration. It is used to hold all the stats and races for a specific series during a season. The series referenced above had a season id of 2846 for the year 2020 quarter 3. active_op_counts() \u00b6 Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose. next_event() \u00b6 Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark. next_session_times() \u00b6 Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for. season_standings() \u00b6 Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. series_race_results() \u00b6 Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time. team_standings() \u00b6 ( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week. Session Data \u00b6 all_subsessions() \u00b6 Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for. private_results() \u00b6 Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module. race_guide() \u00b6 Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed. race_laps_all() \u00b6 Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module. season_from_session() \u00b6 Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for subsession_data() \u00b6 Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return. total_registered_all() \u00b6 Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description Global Data \u00b6 car_class_by_id() \u00b6 Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\". current_seasons() \u00b6 Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id world_records() \u00b6 Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"Class Methods"},{"location":"functions/#which-function-for-x-data","text":"Background-information Every page on the iRacing Membersite receives its data, to be nicely displayed, from various URL endpoints in the form of /GetSomeData that is usually in JSON format. The functions below interact with 1 endpoint each and use the provided arguments as the parameters in the URL query string that we've found it accepts. It is then mapped into a class object for ease of use. (More details here) While some of these endpoints reveal data that can't be found anywhere else, others will return such little information that you might wonder why they exist at all. Our primary goal is to provide accessibility to the data, not make sense of it.. Warning We do not currently offer error handling in the event of an invalid input.","title":"Which function for X data?"},{"location":"functions/#driver-data","text":"Data returned from these methods require a driver (cust_id) to be included in the query parameters. A good example is event_results() . It can return all kinds of different race results, but only results that are related to a driver in question. For all results of a series, go to series_race_results()","title":"Driver Data"},{"location":"functions/#career_stats","text":"Returns a driver\u2019s career stats as seen on iRacing's Career Profile . Args/Kwargs Description cust_id Which driver\u2019s Career Stats to return.","title":"career_stats()"},{"location":"functions/#driver_stats","text":"Returns a list of drivers that match the given parameters. This is the backend source for iRacing's Driver Stats Page . This method provides functionality that the iRacing page does not. It search drivers by name. It is arguably the easiest method to obtain driver information. Args/Kwargs Description search= 'null' Useful for looking up a specific driver. (e.g. 'Driver Full Name5' ) Also accepts partial names to return all matching drivers. country= 'null' Return only drivers from a given country. Accepted values can be found in the CountryCode enum from the constants module for convienence. category=Category.road.value Selects the race discipline. (The Category enum is from the constants module) class_low=None class_high=None Filters results by the driver's License Class. irating_low=None irating_high=None Filters results by the driver's iRating. ttrating_low=None ttrating_high=None Filters results by the driver's ttRating. starts_avg_low=None starts_avg_high=None Filters results by the driver's average starting position. finish_avg_low=None finish_avg_high=None Filters results by the driver's average finish position. points_avg_low=None points_avg_high=None Filters results by the driver's average champ points awarded. inc_avg_low=None inc_avg_high=None Filters results by the driver's average incidents per race. num_results_low=1 num_results_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.irating.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. active=1 Should let you see non-active drivers with 0 , but appears that iRacing does not allow it. friend=None watched=None recent=None Accepts a cust_id to filter results to friend, watched, or recent. !Note: Only works for the currently logged in members cust_id . cust_id=None Does not affect returned data","title":"driver_stats()"},{"location":"functions/#driver_status","text":"Returns friends list for the person logged in. (gold star for least useful) Args/Kwargs Description cust_id=None Returns the status info of the provided cust_id. If logged in while also providing your custid, it will also return the status info of your friends and studied/blacklisted drivers. friends=1 Toggles display of friends in results. studied=1 Toggles display of studied drivers in results. blacklisted=1 Toggles display of blacklisted drivers in results.","title":"driver_status()"},{"location":"functions/#event_results","text":"Returns a list of event results that the driver has participated in. This is the backend data for iRacing's My Series Results . Contains the summary information about the results of the event. For detailed information about a specific session, see: subsession_data() . Args/Kwargs Description cust_id Which driver's events to return. quarter Which quarter/season of the year to return data from. show_races=1 show_quals=None show_tts=None show_ops=None A value of 1 includes the session type in the return. A value of None excludes the session type from the results. show_official=1 show_unofficial=None Toggles official/non-official sessions with values of 1 or None . show_rookie=1 show_class_d=1 show_class_c=1 show_class_b=1 show_class_a=1 show_pro=1 show_prowc=1 Filters results by the license class that a series requires. Setting only show_class_a to 1 for the road category will only display results from the iGPS series, as that is the only series with an A class requirement. result_num_low=1 result_num_high=25 First result of the data to return. Last result of the data to return. sort=Sort.start_time.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module. data_format='json' Other values are currently unknown. category=Category.road.value Which category of race discipline to return. The Category enum is from the constants module. year=datetime.today().year Which year to query. The default sets to the current years data. race_week=None Which raceweek of the quarter/season to query. track_id=None car_class=None car_id=None Allows to filter results to a specific track, car class, car, or a combination of all three. start_low=None start_high=None Filters results by the driver's starting position. finish_low=None finish_high=None Filters results by the driver's finish position. incidents_low=None incidents_high=None Filters results by the driver's number of incidents. points_champ_low=None points_champ_high=None Filters results by driver's champ points awarded.","title":"event_results()"},{"location":"functions/#irating","text":"Utilizes the stats_chart() method to return a list of iRating values. Used in the membersite's Career Profile charts. Accessing irating.current() will give the most recent irating of a user. Args/Kwargs Description cust_id Which driver\u2019s irating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"irating()"},{"location":"functions/#last_races_stats","text":"Returns a stat summary for the driver's last 10 races; used in the membersite's Career Profile \"Last 10 Races\" table. Args/Kwargs Description cust_id Which driver\u2019s races to return.","title":"last_races_stats()"},{"location":"functions/#last_series","text":"Returns a summary of stats about a driver's last 3 series; Used in the membersite's Career Profile \"Last 3 Series\" table. Args/Kwargs Description cust_id Which driver\u2019s series to return.","title":"last_series()"},{"location":"functions/#license_class","text":"Utilizes the stats_chart() method to return a list of license values; Used in the membersite's Career Profile charts. See the LicenseClass class for how to further use this data. (Link to page coming soon...) Args/Kwargs Description cust_id Which driver\u2019s stats to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"license_class()"},{"location":"functions/#member_cars_driven","text":"Returns which cars (list of car_id s) the member has driven. Args/Kwargs Description cust_id Which member to search for their car's driven.","title":"member_cars_driven()"},{"location":"functions/#member_division","text":"Returns which division the driver was in for the specified season_id. (\"was\" because a season_id can be a season that has concluded) Args/Kwargs Description cust_id Which member's division to return. season_id Which season to check for the driver's division.","title":"member_division()"},{"location":"functions/#member_subsession_id_from_session","text":"Returns which subsession_id that a member was in from a given session_id. This might be useful when you you know the session_id before the race session were split into subsessions, but otherwise subsession is usually included for the driver in other queries. Args/Kwargs Description cust_id Which member's subsession_id to return. session_id Which session to look in for the driver's subsession.","title":"member_subsession_id_from_session()"},{"location":"functions/#personal_bests","text":"Returns the drivers best laptimes for the given car, as seen on the /CareerStats page. Args/Kwargs Description cust_id Which driver\u2019s laptimes to return. car_id Which car's laptimes to return for the driver.","title":"personal_bests()"},{"location":"functions/#race_laps_driver","text":"Returns data for all laps completed of a single driver. sim_sess_id specifies the laps from practice, qual, or race. Args/Kwargs Description cust_id Which driver\u2019s lap data to return. subsession_id Which subsession's data to return. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_driver()"},{"location":"functions/#stats_chart","text":"Returns a list in the form of time:value for the race category specified. Args/Kwargs Description cust_id Which driver\u2019s chart to return. category Which race category to return. The Category enum from the constants module provides available values. chart_type Type of chart to return. (iRating, ttRating, and License Class) The ChartType enum from the constants module provides easy access.","title":"stats_chart()"},{"location":"functions/#ttrating","text":"Utilizes the stats_chart class to return a list of ttrating values that are used in the /CareerStats charts. Args/Kwargs Description cust_id Which driver\u2019s ttrating to return. category Selects the race discipline. The Category enum from constants module can be used here.","title":"ttrating()"},{"location":"functions/#yearly_stats","text":"Returns the breakdown of career stats by year, as seen on the driver profile page. Args/Kwargs Description cust_id Which driver\u2019s Yearly Stats to return.","title":"yearly_stats()"},{"location":"functions/#series-data","text":"Data returned from these methods return information about a series. Note On the topic of series_id and season_id : series_id refers to the specific configuration for a series that does not change. e.g. The \"Advanced Mazda MX-5 Cup Series\" has a series id of 231. It refers to the car, license, caution types, incident limits, and grid size. season_id refers to time period that a series will be active with a given track configuration. It is used to hold all the stats and races for a specific series during a season. The series referenced above had a season id of 2846 for the year 2020 quarter 3.","title":"Series Data"},{"location":"functions/#active_op_counts","text":"Returns a list of 'Open Practice' sessions that are currently active. By default only sessions with registered drivers are included. Use include_empty flag to see all sessions. Args/Kwargs Description count_max=250 Sets the max number of results to return. include_empty='n' Set to 'y' if empty results should be included. cust_id=None Unknown purpose.","title":"active_op_counts()"},{"location":"functions/#next_event","text":"Returns the next event for a series, from the requested time. Args/Kwargs Description series_id Which series to return the next event for. event_type=EventType.race.value Which event_type (Race, Practice) to return results for. The EventType enum is from the constants module. date=now_five_min_floor() Default is to use the same time format that iRacing's Race Guide uses, which is the current time rounded down the previous 5 minute mark.","title":"next_event()"},{"location":"functions/#next_session_times","text":"Returns the next 5 sessions with all of their attributes: start time, registered drivers, session parameters, etc. Args/Kwargs Description season_id Which season to return the sessions for.","title":"next_session_times()"},{"location":"functions/#season_standings","text":"Returns the championship point standings of a series. This is the same data found in /statsseries.jsp. Args/Kwargs Description season_id Which season's champ points to return. race_week=None Which race_week of the season to return. car_class_id=None Filters point standings to a specific car class. club_id=None Filters point standings to a specific club. division=None Filters point standings to a specific division. result_num_low=1 result_num_high=25 The first result of the query to return and the last result of the query to return. sort=Sort.champ_points.value order=Sort.descending.value How to sort and order the data. The default is to sort the data with the most recent race as the first result. The Sort enum is from the constants module.","title":"season_standings()"},{"location":"functions/#series_race_results","text":"Returns summary info for the specified season_id and race_week. Results are restricted to a single week per query. Args/Kwargs Description season_id Which season's results to return. race_week=1 Which week of the season to return. iRacing restricts this endpoint to querying a single week at a time.","title":"series_race_results()"},{"location":"functions/#team_standings","text":"( Not finished ) Returns championship point standings of Teams. Args/Kwargs Description season_id Which season's standings to return. car_class_id Which car class to return data for. (Required to select 1 class) car_id=None Filters results to a specific car. race_week=None Filters results to a specific race week.","title":"team_standings()"},{"location":"functions/#session-data","text":"","title":"Session Data"},{"location":"functions/#all_subsessions","text":"Returns subsession IDs for any additional race splits to the one provided. Args/Kwargs Description subsession_id Which subsession to return the related subsession_id (s) for.","title":"all_subsessions()"},{"location":"functions/#private_results","text":"Returns private sessions that the driver has participated in. Args/Kwargs Description cust_id Which driver\u2019s hosted sessions to return. time_start_lower time_start_upper Filters results to between these times. Note : Both fields are required for this endpoint to return data. lower_bound=1 upper_bound=25 The first result of the query to return and the last result of the query to return. sort=Sort.session_name.value order=Sort.ascending.value How to sort and order the data. The default is to sort the data alphabetically by session_name . The Sort enum is from the constants module.","title":"private_results()"},{"location":"functions/#race_guide","text":"Returns all data used by the race guide page for the active seasons. Filters are identical to those found when visiting the race guide with a browser. Args/Kwargs Description rookie=None class_d=None class_c=None class_b=None class_a=None class_pro=None class_prowc=None Filters for license classes. Setting to 0 will filter results to exclude series requiring that license. Any combination is allowed. oval=None road=None dirt_oval=None dirt_road=None Filters for race categories. Setting to 0 will filter results to exclude the category from being returned. Any combination is allowed. fixed_setup=None Set to 1 to display only fixed setup sessions. (None displays both. There is not an option to display only open setups) multiclass=None Set to 1 to display only multiclass sessions meets_mpr=None Set to 1 to display races that meet your MPR. (Restricted to loggedin member) populated=None Set to 1 to display only populated sessions. eligible=None Set to 1 to dispaly only the series you are eligible for. (Restricted to logged in member) official=None Set to 1 to return only official race sessions. time=now_five_min_floor() The Race Guide uses the current time (in unix milliseconds) rounded down the previous 5 minute mark as the default value. A time in the future is allowed.","title":"race_guide()"},{"location":"functions/#race_laps_all","text":"Returns information about all laps of a race for every driver. The class of car can be set for multiclass races. To specify laps of a single driver, use race_laps_driver(). Args/Kwargs Description subsession_id Which subsession to return lap information for. car_class_id=None For multiclass races, you can specify to return the lap data for a single class. sim_session_type= SimSessionType.race.value Which segment of a race session to return results for. (Practice, Qualify, Race) The SimSessionType enum is from the constants module.","title":"race_laps_all()"},{"location":"functions/#season_from_session","text":"Returns a single season_id that the session_id was for. Args/Kwargs Description session_id Which session_id to return a season_id for","title":"season_from_session()"},{"location":"functions/#subsession_data","text":"Returns extensive data about a session. This endpoint contains unique datapoints that are unavailable elsewhere. !Note: The segments of a session are not seperated (Practice, Qualify, Race). Results for each driver for each segment are listed concurrently. e.g If 25 drivers participate, there will be 75 Driver objects returned. 25 for each session segment. Args/Kwargs Description subsession_id Which subsession's data to return.","title":"subsession_data()"},{"location":"functions/#total_registered_all","text":"Broken at the moment ~~Returns a list of every upcoming session and the number of drivers that have registered. This data is used in the small text next to each series name in /Series.do that shows number of registered drivers for that series.~~ Args/Kwargs Description","title":"total_registered_all()"},{"location":"functions/#global-data","text":"","title":"Global Data"},{"location":"functions/#car_class_by_id","text":"Returns a CarClass object from the given car_class_id . Args/Kwargs Description car_class_id=0 Which car_class to retrieve. The default value of 0 returns a unique CarClass: HostedAllCarsClass . Instead of returning car objects in the cars_in_class attribute, HostedAllCarsClass is a list of all CarClasses with attributes \"name\" and \"id\".","title":"car_class_by_id()"},{"location":"functions/#current_seasons","text":"Returns a Season object for every season. Args/Kwargs Description only_active=1 Set to 0 to include all previous seasons and currently active. kwargs See table below for available boolean kwargs. Setting any of these to =False will hide that field in the returned data series_short_name cat_id season_id year quarter series_id active license_eligible only_active is_lite car_classes tracks start end cars race_week category series_lic_group_id car_id","title":"current_seasons()"},{"location":"functions/#world_records","text":"Returns laptimes with the requested paramaters. Filters can also be seen on the /worldrecords.jsp page on the membersite. Args/Kwargs Description year Which year to return lap records for. quarter Which quarter/season to return lap records for. car_id Which car to return lap records for. track_id Which track to return lap records for. cust_id=None Only works if cust_id matches the logged in user. Otherwise does nothing.","title":"world_records()"},{"location":"modules/","text":"client \u00b6 The client module contains the Client() class which makes up the bulk of pyracing. Along with Client.authenticate(), it holds the class methods to query all of iRacing's web-data. For a detailed description of each class method, see the List of Functions wiki page. constants \u00b6 The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used. response_objects \u00b6 The response_objects sub-package is nothing but a collection of objects. JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data.","title":"Modules"},{"location":"modules/#client","text":"The client module contains the Client() class which makes up the bulk of pyracing. Along with Client.authenticate(), it holds the class methods to query all of iRacing's web-data. For a detailed description of each class method, see the List of Functions wiki page.","title":"client"},{"location":"modules/#constants","text":"The constants module contains all constants of iRacing. Since iRacing constants are not always consistent in usage, we assign them to Class Attributes (not instance attributes ). Which enables using the name \"dirt_oval\" instead of remembering that 4 is the index for it. As an example, in any of the Client() methods that accept an argument of category you can input \"Dirt Oval\" with constants.Category.dirt_oval.value and the correct value of 4 will be used.","title":"constants"},{"location":"modules/#response_objects","text":"The response_objects sub-package is nothing but a collection of objects. JSON data returned from iRacing endpoints and mapping them to instanced objects. When performing a query and assigning it to a variable, it will be of the object type unique to that data. This means that you don't have to parse any of the JSON data.","title":"response_objects"},{"location":"All%20Data/active_op_count/","text":"active_op_count \u00b6 Object: ActiveOPCount ```python allow_entry cars_left cat_id count_group count_registered count_total driver_change_param_1 driver_change_param_2 driver_change_rule driver_changes drivers_connected drivers_registered earth_rotation_speedup farm_id fog_density humidity leave_marbles pits pits_in_use pits_total race_panel_img rubber_practice rubber_qualify rubber_race rubber_warmup season_id series_abbrv series_id series_name session_id skies subsession_id team_drivers_max team_drivers_min temp_unit temp_value time_of_day time_start time_start_sim total_groups track_config track_id track_name weather_initial weather_ongoing weather_type wind_direction wind_speed_unit wind_speed_value","title":"active_op_count"},{"location":"All%20Data/active_op_count/#active_op_count","text":"Object: ActiveOPCount ```python allow_entry cars_left cat_id count_group count_registered count_total driver_change_param_1 driver_change_param_2 driver_change_rule driver_changes drivers_connected drivers_registered earth_rotation_speedup farm_id fog_density humidity leave_marbles pits pits_in_use pits_total race_panel_img rubber_practice rubber_qualify rubber_race rubber_warmup season_id series_abbrv series_id series_name session_id skies subsession_id team_drivers_max team_drivers_min temp_unit temp_value time_of_day time_start time_start_sim total_groups track_config track_id track_name weather_initial weather_ongoing weather_type wind_direction wind_speed_unit wind_speed_value","title":"active_op_count"},{"location":"All%20Data/career_stats/","text":"career_stats \u00b6 category incidents_avg laps laps_led laps_led_pcnt points_avg points_club poles pos_finish_avg pos_start_avg starts top_5_pcnt top_5s win_pcnt wins","title":"career_stats"},{"location":"All%20Data/career_stats/#career_stats","text":"category incidents_avg laps laps_led laps_led_pcnt points_avg points_club poles pos_finish_avg pos_start_avg starts top_5_pcnt top_5s win_pcnt wins","title":"career_stats"},{"location":"All%20Data/driver_stats/","text":"driver_stats \u00b6 club_id club_name club_points country_code cust_id display_name field_size_avg group_letter group_name helm_color_1 helm_color_2 helm_color_3 helm_face_type helm_helmet_type helm_pattern incidents_avg irating irating_rank laps laps_led license_class license_class_id license_class_rank license_level points points_avg pos_finish_avg pos_start_avg rank region row starts sub_level top_25_percent ttrating ttrating_rank wins","title":"driver_stats"},{"location":"All%20Data/driver_stats/#driver_stats","text":"club_id club_name club_points country_code cust_id display_name field_size_avg group_letter group_name helm_color_1 helm_color_2 helm_color_3 helm_face_type helm_helmet_type helm_pattern incidents_avg irating irating_rank laps laps_led license_class license_class_id license_class_rank license_level points points_avg pos_finish_avg pos_start_avg rank region row starts sub_level top_25_percent ttrating ttrating_rank wins","title":"driver_stats"},{"location":"All%20Data/event_results/","text":"event_results \u00b6 car_class_id car_id category_id cust_id date_start display_name event_type group_name helm_color_1 helm_color_2 helm_color_3 helm_license_level helm_pattern incidents lap_best lap_best_subsession lap_qual_best license_group official_session points_champ points_champ_sort points_club points_club_sort points_drop_race pos_finish pos_start race_week rank_session row_number season_id season_quarter season_year series_id session_id strength_of_field subsession_id time_finished time_start time_start_raw track_id winner_display_name winner_helm_color_1 winner_helm_color_2 winner_helm_color_3 winner_helm_pattern winner_license_level winners_group_id","title":"event_results"},{"location":"All%20Data/event_results/#event_results","text":"car_class_id car_id category_id cust_id date_start display_name event_type group_name helm_color_1 helm_color_2 helm_color_3 helm_license_level helm_pattern incidents lap_best lap_best_subsession lap_qual_best license_group official_session points_champ points_champ_sort points_club points_club_sort points_drop_race pos_finish pos_start race_week rank_session row_number season_id season_quarter season_year series_id session_id strength_of_field subsession_id time_finished time_start time_start_raw track_id winner_display_name winner_helm_color_1 winner_helm_color_2 winner_helm_color_3 winner_helm_pattern winner_license_level winners_group_id","title":"event_results"},{"location":"All%20Data/last_races_stats/","text":"","title":"Last races stats"},{"location":"All%20Data/season_standings/","text":"season_standings \u00b6 club_id club_name country country_code country_name cust_id display_name division dropped helm_color_1 helm_color_2 helm_color_3 helm_pattern incidents irating laps laps_led license_level_max points poles pos pos_finish_avg pos_start_avg rank row starts sub_level top_fives week wins","title":"season_standings"},{"location":"All%20Data/season_standings/#season_standings","text":"club_id club_name country country_code country_name cust_id display_name division dropped helm_color_1 helm_color_2 helm_color_3 helm_pattern incidents irating laps laps_led license_level_max points poles pos pos_finish_avg pos_start_avg rank row starts sub_level top_fives week wins","title":"season_standings"},{"location":"All%20Data/subsession_data/","text":"subsession_data \u00b6 cat_id caution_laps caution_type cautions corners_total driver_change_param_1 driver_change_param_2 driver_change_rule driver_changes event_type fog_density humidity lap_avg laps_completed laps_for_qual_avg laps_for_solo_avg lead_changes league_id league_season_id leave_marbles max_weeks points_type private_session_id race_week reserve_status rubber_practice rubber_qualify rubber_race rubber_warmup season_id season_name season_name_short season_quarter season_year series_id series_name series_name_short session_id session_name sim_ses_type skies special_event_type special_event_type_text strength_of_field subsession_id team_drivers_max team_drivers_min temp_unit temp_value time_of_day time_start time_start_sim track track_config track_id weather_initial weather_ongoing weather_type wind_direction wind_speed_unit wind_speed_value subsession_data \u00b6 car_class_id car_class_name car_class_name_short car_color_1 car_color_2 car_color_3 car_id car_num car_num_font car_num_slant car_number_color_1 car_number_color_2 car_number_color_3 car_pattern car_sponser_1 car_sponser_2 club_id club_name club_name_short club_points cpi_new cpi_old cust_id damage_model display_name division division_name drop_race event_type_name group_id heat_info_id helm_color_1 helm_color_2 helm_color_3 helm_pattern host_id incidents interval interval_class irating_new irating_old lap_avg lap_best lap_best_n lap_qual_best lap_qual_best_at lap_qual_best_n lap_qual_best_time laps_best_n_num laps_best_n_time laps_comp laps_led laps_opt_comp league_points license_category license_change_oval license_change_road license_class license_level_new license_level_old multiplier official pct_fuel_fill_max points_champ points_champ_agg pos pos_finish pos_finish_class pos_start reason_out reason_out_id restrict_results sim_ses_name sim_ses_num sim_ses_type_name sub_level_new sub_level_old suit_color_1 suit_color_2 suit_color_3 suit_pattern time_session_start track_cat_id track_category ttrating_new ttrating_old vehicle_key_id weight_penalty_kg wheel_chrome wheel_color","title":"subsession_data"},{"location":"All%20Data/subsession_data/#subsession_data","text":"cat_id caution_laps caution_type cautions corners_total driver_change_param_1 driver_change_param_2 driver_change_rule driver_changes event_type fog_density humidity lap_avg laps_completed laps_for_qual_avg laps_for_solo_avg lead_changes league_id league_season_id leave_marbles max_weeks points_type private_session_id race_week reserve_status rubber_practice rubber_qualify rubber_race rubber_warmup season_id season_name season_name_short season_quarter season_year series_id series_name series_name_short session_id session_name sim_ses_type skies special_event_type special_event_type_text strength_of_field subsession_id team_drivers_max team_drivers_min temp_unit temp_value time_of_day time_start time_start_sim track track_config track_id weather_initial weather_ongoing weather_type wind_direction wind_speed_unit wind_speed_value","title":"subsession_data"},{"location":"All%20Data/subsession_data/#subsession_data_1","text":"car_class_id car_class_name car_class_name_short car_color_1 car_color_2 car_color_3 car_id car_num car_num_font car_num_slant car_number_color_1 car_number_color_2 car_number_color_3 car_pattern car_sponser_1 car_sponser_2 club_id club_name club_name_short club_points cpi_new cpi_old cust_id damage_model display_name division division_name drop_race event_type_name group_id heat_info_id helm_color_1 helm_color_2 helm_color_3 helm_pattern host_id incidents interval interval_class irating_new irating_old lap_avg lap_best lap_best_n lap_qual_best lap_qual_best_at lap_qual_best_n lap_qual_best_time laps_best_n_num laps_best_n_time laps_comp laps_led laps_opt_comp league_points license_category license_change_oval license_change_road license_class license_level_new license_level_old multiplier official pct_fuel_fill_max points_champ points_champ_agg pos pos_finish pos_finish_class pos_start reason_out reason_out_id restrict_results sim_ses_name sim_ses_num sim_ses_type_name sub_level_new sub_level_old suit_color_1 suit_color_2 suit_color_3 suit_pattern time_session_start track_cat_id track_category ttrating_new ttrating_old vehicle_key_id weight_penalty_kg wheel_chrome wheel_color","title":"subsession_data"},{"location":"All%20Data/world_records/","text":"world_records \u00b6 car_id cat_id category club_id club_name country_code cust_id display_name helm_color_1 helm_color_2 helm_color_3 helm_pattern irating license_class license_class_id license_level practice practice_start_time practice_subsession_id qualify qualify_subsession_id qualify_time_start race race_start_time race_subsession_id region row season_quarter season_year sub_level timetrial track_id tt_start_time tt_subsession_id ttrating","title":"world_records"},{"location":"All%20Data/world_records/#world_records","text":"car_id cat_id category club_id club_name country_code cust_id display_name helm_color_1 helm_color_2 helm_color_3 helm_pattern irating license_class license_class_id license_level practice practice_start_time practice_subsession_id qualify qualify_subsession_id qualify_time_start race race_start_time race_subsession_id region row season_quarter season_year sub_level timetrial track_id tt_start_time tt_subsession_id ttrating","title":"world_records"}]}